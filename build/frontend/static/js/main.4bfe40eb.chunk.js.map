{"version":3,"sources":["components/banner.tsx","components/recipe.tsx","components/searchCard.tsx","components/searchResults.tsx","components/searchBar.tsx","components/home.tsx","components/register.tsx","components/login.tsx","App.tsx","index.tsx"],"names":["Banner","id","to","className","Component","ArrayToList","props","items","i","list","length","section","itemList","j","next","push","key","header","ordered","toString","Recipe","state","recipeFound","recipeID","match","params","recipeid","URL","imageURL","author","recipeName","difficulty","totalTime","prepTime","inactiveTime","activeTime","cookTime","yield","ingredients","directions","source","fetch","this","res","json","data","error","setState","Helmet","src","alt","width","target","rel","href","SearchCard","recipe","info","link","_id","SearchResults","updateCurrentResults","console","log","curPage","currentPage","maxResults","numResultsPerPage","firstIdx","secondIdx","visibleResults","slice","map","currentResults","forceUpdate","goToPreviousPage","goToNextPage","lastPage","numResults","pageDensity","Math","ceil","onClick","SearchBar","searchType","input","emptyInput","resultsFound","loading","results","getResults","a","fetchURL","searchResults","updateInput","event","currentTarget","value","updateSearchType","override","css","name","onSubmit","type","autoComplete","placeholder","onChange","checked","htmlFor","height","title","Home","Register","email","password","confirmPassword","errors","redirectAfterSumbit","submitPage","preventDefault","options","method","headers","body","JSON","stringify","response","err","Login","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bfe40eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/banner.css'\n\nexport default class Banner extends Component {\n    render() {\n        return (\n            <div id='logoBanner'>\n                <Link to='/home' className='logo'>\n                    MAGELLAN\n                </Link>\n\n                <Link to='/login' className='loginButton'>\n                    Log In\n                </Link>\n            </div>\n        );\n    }\n}","import React, { Component, FunctionComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport '../styles/recipe.css';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { RecipeData } from '../../../magellan';\n\n//Define local types\n\ninterface ArrayToListProps {\n    list:    string[][],\n    ordered: boolean\n}\n\ninterface RecipeParams {\n    recipeid: string\n}\n\ninterface Props extends RouteComponentProps<RecipeParams> {}\n\ninterface State {\n    recipeFound:  boolean,\n    recipeID:     string,\n    URL:          string,\n    imageURL:     string,\n    author:       string,\n    recipeName:   string,\n    difficulty:   string | undefined,\n    totalTime:    string | undefined,\n    prepTime:     string | undefined,\n    inactiveTime: string | undefined,\n    activeTime:   string | undefined,\n    cookTime:     string | undefined,\n    yield:        string | undefined,\n    ingredients:  string[][],\n    directions:   string[][],\n    source:       string | undefined\n}\n\n//Parse an array of ingredients or directions into a JSX list\nconst ArrayToList: FunctionComponent<ArrayToListProps> = (props) => {\n    let items: JSX.Element[] = [];\n\n    //Iterate through each section\n    for (let i = 0; i < props.list.length; i++) {\n        let section: JSX.Element[] = [];\n        let itemList = props.list[i];\n\n        //Store each item in the inner array as an HTML list item\n        for (let j = 1; j < itemList.length; j++) { //Start at j = 1 to skip the header\n            let next = itemList[j];\n            section.push (\n                <li key={next}>\n                    {next}\n                </li>\n            );\n        }\n\n        //Print the section header if noteworthy\n        const header = itemList[0];\n\n        if (header !== 'main') {\n            items.push (\n                <div className='sectionHeader'\n                    key={header}>\n                    {header}\n                </div>\n            );\n        }\n\n        //Print the list of items\n        items.push (\n            <div className='sectionData'>\n                { props.ordered\n                  ? <ol key={section.toString()}>\n                        {section}\n                    </ol>\n                  : <ul key={section.toString()}>\n                        {section}\n                    </ul>\n                }\n            </div>\n        );\n    }\n\n    return (\n        <div>{items}</div>\n    );\n}\n\n//Display full recipe data\nexport default class Recipe extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            recipeFound:  true,\n            recipeID:     this.props.match.params.recipeid, //URL parameter\n            URL:          '',\n            imageURL:     '',\n            author:       '',\n            recipeName:   '',\n            difficulty:   '',\n            totalTime:    '',\n            prepTime:     '',\n            inactiveTime: '',\n            activeTime:   '',\n            cookTime:     '',\n            yield:        '',\n            ingredients:  [],\n            directions:   [],\n            source:       ''\n        };\n    }\n\n    //Gather data from server JSON response\n    async componentDidMount() {\n        const res = await fetch(`/api/recipe/${this.state.recipeID}`);\n        const data: RecipeData = await res.json();\n\n        //Recipe not found\n        if (data.error) {\n            this.setState({ recipeFound: false });\n        }\n        //Recipe found\n        else {\n            this.setState({\n                URL:          data.URL,\n                imageURL:     data.imageURL,\n                author:       data.author,\n                recipeName:   data.recipeName,\n                difficulty:   data.difficulty,\n                totalTime:    data.totalTime,\n                prepTime:     data.prepTime,\n                inactiveTime: data.inactiveTime,\n                activeTime:   data.activeTime,\n                cookTime:     data.cookTime,\n                yield:        data.yield,\n                ingredients:  data.ingredients,\n                directions:   data.directions,\n                source:       data.source\n            });\n        }\n    }\n\n    render() {\n        //Recipe not found\n        if (!this.state.recipeFound) {\n            return (\n                <div id='notFoundNotice'>\n                    Recipe not found!\n                    Please try again\n                </div>\n            );\n        }\n        //Recipe found\n        else {\n            return (\n                <div>\n                    { this.state.recipeName\n                      ? <Helmet>\n                            <title>{'Magellan - ' + this.state.recipeName}</title>\n                        </Helmet>\n                      : <Helmet>\n                            <title>{'Magellan'}</title>\n                        </Helmet>\n                    }\n\n                    <div id='header'>\n                        <div id='recipeName'>\n                            {this.state.recipeName}\n                        </div>\n\n                        <div id='author'>\n                            by {this.state.author}\n                        </div>\n\n                        <div id='source'>\n                            Courtesy of\n                            <span id='sourceText'>\n                                {this.state.source}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id='image'>\n                        { this.state.imageURL\n                          ? <img src={this.state.imageURL} alt='' width='600'></img>\n                          : <p className='invisibleElement'></p>\n                        }\n\n                        <div id='sourceLink'>\n                            <a target='_blank' rel='noopener noreferrer' href={this.state.URL}>Original Recipe</a>\n                        </div>\n                    </div>\n                    \n                    <div id='details'>\n                        <div id='detailsLeft'>\n                            <div id='difficulty'>\n                                Difficulty:\n                                <span id='difficultyText'>\n                                    {this.state.difficulty}\n                                </span>\n                            </div>\n                            \n                            <div id='yield'>\n                                Yield:\n                                <span id='yieldText'>\n                                    {this.state.yield}\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id='times'>\n                            <div id='totalTime'>\n                                Total Time:\n                                <span id='totalTimeText'>\n                                    {this.state.totalTime}\n                                </span>\n                            </div>\n\n                            <div id='timesList'>\n                                <ul>\n                                    <div id='prepTime'>\n                                        { this.state.prepTime\n                                          ? <li>\n                                                <span id='prepTimeText'>\n                                                    {this.state.prepTime}\n                                                </span>\n                                                prep time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='cookTime'>\n                                        { this.state.cookTime\n                                          ? <li>\n                                                <span id='cookTimeText'>\n                                                    {this.state.cookTime}\n                                                </span>\n                                                cook time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='activeTime'>\n                                        { this.state.activeTime\n                                          ? <li>\n                                                <span id='activeTimeText'>\n                                                    {this.state.activeTime}\n                                                </span>\n                                                active time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='inactiveTime'>\n                                        { this.state.inactiveTime\n                                          ? <li>\n                                                <span id='inactiveTimeText'>\n                                                    {this.state.inactiveTime}\n                                                </span>\n                                                inactive time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id='ingredients'>\n                        <div className='listHeader'>\n                            Ingredients\n                        </div>\n\n                        <ArrayToList\n                            list={this.state.ingredients}\n                            ordered={false}\n                        />\n                    </div>\n\n                    <div id='directions'>\n                        <div className='listHeader'>\n                            Directions\n                        </div>\n\n                        <ArrayToList\n                            list={this.state.directions}\n                            ordered={true}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n","import React, {Component} from 'react';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchCard.css';\n\ninterface Props {\n    info: RecipeDataResult\n}\n\ninterface State {\n    recipe: RecipeDataResult\n}\n\nexport default class SearchCard extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            recipe: props.info\n        };\n    }\n\n    render() {\n        const data = this.state.recipe;\n        const link = `/recipe/${data._id}`;\n\n        //Select the appropriate class so we can give each source a unique color\n        let src = '';\n        \n        switch(data.source) {\n            case (\"Food Network\"):\n                src = \"FNsource\";\n                break;\n            case (\"Taste of Home\"):\n                src = \"TOHsource\";\n                break;\n        }\n\n        return (\n            <div id='card' className='expandableCard'>\n                <a className='cardRecipeLink'\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={link}>\n                    <div id='cardContents'>\n                        <div id='cardInfo'>\n                            <div id='cardRecipeName'>{data.recipeName}</div>\n                            <div id='secondaryDetails'>\n                                { data.author\n                                    ? <div id='cardAuthor'>by {data.author}</div>\n                                    : <p></p>\n                                }\n\n                                <div id='tertiaryDetails'>\n                                    { data.source\n                                        ? <div id='cardSource' className={src}>\n                                            from {data.source}\n                                          </div>\n                                        : <p></p>\n                                    }\n\n                                    { data.totalTime\n                                        ? <div id='cardTotalTime'>{data.totalTime}</div>\n                                        : <p></p>\n                                    }\n                                    \n                                </div>\n                            </div>\n                        </div>\n                        { data.imageURL\n                            ? <img id='cardPhoto' src={data.imageURL} alt=''></img>\n                            : <p></p>\n                        }\n                    </div>\n                </a>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport SearchCard from './searchCard';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchResults.css';\n\ninterface Props {\n    data: RecipeDataResult[]\n}\n\ninterface State {\n    currentResults: JSX.Element[],\n    numResults: number,\n    numResultsPerPage: number,\n    lastPage: number,\n    currentPage: number\n}\n\nexport default class SearchResults extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            currentResults: [],\n            numResults: 0,\n            numResultsPerPage: 5, //Arbitrary\n            lastPage: 0,\n            currentPage: 1\n        };\n    }\n\n    //Returns the recipes to show on the current page\n    updateCurrentResults = (): void => {\n        console.log('updating current results');\n\n        //Calculate the range of results to use\n        const curPage = this.state.currentPage;\n        const maxResults = this.state.numResultsPerPage;\n\n        let firstIdx = (curPage - 1) * maxResults;\n        let secondIdx = curPage * maxResults;\n\n        console.log(firstIdx, secondIdx);\n\n        //Turn them into search cards\n        const visibleResults = this.props.data\n            .slice(firstIdx, secondIdx)\n            .map(recipe => (\n                <SearchCard info={recipe} />\n            )\n        );\n\n        this.setState({\n            currentResults: visibleResults\n        }, () => {\n            console.log('visible results updated');\n            this.forceUpdate();\n        });\n    }\n\n    goToPreviousPage = (): void => {\n        console.log('going to previous page');\n\n        const curPage = this.state.currentPage;\n\n        if (curPage > 1) {\n            this.setState({\n                currentPage: curPage - 1\n            }, () => {\n                console.log('page num decremented');\n                this.updateCurrentResults();\n            });\n        }\n    }\n\n    goToNextPage = (): void => {\n        console.log('going to next page');\n\n        const curPage = this.state.currentPage;\n        const lastPage = this.state.lastPage;\n\n        if (curPage < lastPage) {\n            this.setState({\n                currentPage: curPage + 1\n            }, () => {\n                console.log('page num incremented')\n                this.updateCurrentResults();\n            });\n        }\n    }\n\n    //When the component loads, calculate the number of pages needed\n    componentDidMount() {\n        const numResults = this.props.data.length;\n        const pageDensity = this.state.numResultsPerPage;\n        \n        this.setState({\n            numResults: numResults,\n            lastPage: Math.ceil(numResults / pageDensity)\n        }, () => {\n            this.updateCurrentResults();\n        });\n    }\n\n    render() {\n        console.log('rendering');\n        return (\n            <div id='wrapper'>\n                <div id='topResultsLabel'>\n                    Top Results:\n                </div>\n\n                <div id='resultsContainer'>\n                    <div id='scrollLeftButton'>\n                        { this.state.currentPage > 1\n                            ? <button\n                                className='scrollButton'\n                                onClick={this.goToPreviousPage}\n                              >◀</button>\n                            : <div className='scrollPlaceholder'> </div>\n                        }\n                    </div>\n\n                    <div id='resultsList'>\n                        {this.state.currentResults}\n                    </div>\n\n                    <div id='scrollRightButton'>\n                        { this.state.currentPage < this.state.lastPage\n                            ? <button\n                                className='scrollButton'\n                                onClick={this.goToNextPage}\n                              >▶</button>\n                            : <div className='scrollPlaceholder'> </div>\n                        }\n                    </div>\n                </div>\n\n                <div id='pageDetails'>\n                    <div>Viewing page {this.state.currentPage} of {this.state.lastPage}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\nimport SearchResults from './searchResults';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchBar.css';\n\n//Define local types\n\nexport type SearchType = 'name' | 'ing';\n\ninterface State {\n    searchType:   SearchType,\n    input:        string,\n    emptyInput:   boolean,\n    resultsFound: boolean,\n    loading:      boolean,\n    results:      RecipeDataResult[],\n    maxResults:   number\n}\n\nexport default class SearchBar extends Component {\n    state: State = {\n        searchType:   'name',\n        input:        '',\n        emptyInput:   false,\n        resultsFound: true,\n        loading:      false,\n        results:      [],\n        maxResults:   35 //Arbitrary\n    };\n\n    //Launch a search in the server and store the results\n    getResults = async () => {\n\n        //Make sure they entered something\n        if (this.state.input) {\n            \n            //Query the db\n            const fetchURL = `/api/search/${this.state.searchType}/${this.state.input}/${this.state.maxResults}`;\n            this.setState({\n                results: [],\n                resultsFound: true,\n                loading: true,\n                emptyInput: false\n            });\n\n            const res = await fetch(fetchURL); //Execute the search\n            const data = await res.json();\n\n            //No search results\n            if (data.error) {\n                this.setState({\n                    resultsFound: false,\n                    loading: false\n                });\n            }\n\n            //Store the results in state\n            else {\n                this.setState({\n                    resultsFound: true,\n                    loading: false,\n                    results: data.searchResults\n                });\n            }\n        }\n        else {\n            this.setState({\n                emptyInput: true,\n                resultsFound: true, //Hide this notice if last search found nothing\n                results: []\n            });\n        }\n    }\n\n    //Save the user's current input in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ input: event.currentTarget.value });\n    }\n\n    //Change the search type when the radio buttons are clicked\n    updateSearchType = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ searchType: event.currentTarget.value });\n    }\n\n    // Search bar - form accepts the search and queries the db\n    render() {\n        //CSS for loading bar\n        const override = css`\n            width: 285px;\n            margin-top: 10px;\n            margin-left: auto;\n            margin-right: auto;\n            background-color: lightgrey;\n        `;\n\n        return (\n            <div id='searchContainer'>\n                <div id='notice'>\n                    Find your next meal!\n                </div>\n\n                <form\n                    name='searchBar'\n                    target='hiddenFrame'\n                    onSubmit={this.getResults}>\n\n                    <div id='searchBarWrapper'>\n                        <input\n                            name='search'\n                            id='searchInput'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Search for recipes'\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <button\n                            type='submit'\n                            id='searchButton'\n                            className='fa fa-search'>\n                        </button>\n                    </div>\n                    \n                    <div id='searchType'>\n                        Search by:\n\n                        <div id='searchTypeNameWrapper'>\n                            <input\n                                type='radio'\n                                id='searchTypeNameButton'\n                                name='searchType'\n                                value='name'\n                                onChange={this.updateSearchType}\n                                checked={this.state.searchType === 'name'}>\n                            </input>\n\n                            <label htmlFor='searchTypeNameButton'>Recipe Name</label>\n                        </div>\n\n                        <div id='searchTypeIngWrapper'>\n                            <input\n                                type='radio'\n                                id='searchTypeIngButton'\n                                name='searchType'\n                                value='ing'\n                                onChange={this.updateSearchType}\n                                checked={this.state.searchType === 'ing'}>\n                            </input>\n                            \n                            <label htmlFor='searchTypeIngButton'>Ingredient</label>\n                        </div>\n                    </div>\n\n                    <div id='inputReminder'>\n                        { this.state.emptyInput\n                          ? <h4>Please enter something to search</h4>\n                          : <p></p>\n                        }\n                    </div>\n\n                    <div id='loadingBar'>\n                        { this.state.loading\n                          ? <div>\n                                Searching...\n                                <BarLoader height={6} css={override}/>\n                            </div>\n                          : <p></p>\n                        }\n                    </div>\n                </form>\n                \n                <div id='results'>\n                    { !this.state.resultsFound\n                      ? <div id='failNotice'>No results found. Try again</div>\n                      : <p></p>\n                    }\n                    { this.state.results.length\n                      ? <SearchResults data={this.state.results}/>\n                      : <p></p>\n                    }\n                </div>\n\n                {/* Form redirects to this invisible iframe, keeping it on the same page */}\n                <iframe name='hiddenFrame' id='iframe' title='hidden'></iframe>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport SearchBar from './searchBar';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                <SearchBar />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport '../styles/register.css';\n\ninterface State {\n    email: string,\n    password: string,\n    confirmPassword: string,\n    errors: string[],\n    redirectAfterSumbit: boolean\n};\n\nexport default class Register extends Component {\n    state: State = {\n        email: '',\n        password: '',\n        confirmPassword: '',\n        errors: [],\n        redirectAfterSumbit: false\n    };\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let { id, value } = event.currentTarget;\n        this.setState({ [id]: value });\n    }\n\n    //Submit the form and save any errors that might have returned\n    submitPage = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        const inputs = JSON.stringify({\n            email:           this.state.email,\n            password:        this.state.password,\n            confirmPassword: this.state.confirmPassword\n        });\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: inputs\n        };\n\n        try {\n            (async() => {\n                const response = await fetch('/auth/register', options);\n                const errors: string[] = await response.json();\n                \n                if (!errors.length) {\n                    this.setState({\n                        redirectAfterSumbit: true\n                    });\n                }\n                else {\n                    this.setState({\n                        errors\n                    });\n                }\n            })();\n        }\n        catch (err) {\n            console.log('Error submitting registration form:', err);\n        }\n    }\n\n    render() {\n        if (this.state.redirectAfterSumbit) {\n            return (<Redirect to='/login' />);\n        }\n\n        return (\n            <div id='registerWrapper'>\n                <div id='registerHeader'>Create an account</div>\n\n                <form\n                    name='registerForm'\n                    onSubmit={this.submitPage}>\n\n                    <div>ERRORS:\n                        {\n                        this.state.errors.length\n                            ? this.state.errors\n                            : ''\n                        }\n                    </div>\n\n                    <div id='inputWrapper'>\n                        <label\n                            id='emailLabel'\n                            className='label'\n                            htmlFor='email'>\n                                Email Address:\n                        </label>\n                        <input\n                            className='input'\n                            id='email'\n                            name='email'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Email Address'\n                            value={this.state.email}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <label\n                            id='passwordLabel'\n                            className='label'\n                            htmlFor='password'>\n                                Password:\n                        </label>\n                        <input\n                            className='input'\n                            id='password'\n                            name='password'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Password'\n                            value={this.state.password}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <label\n                            id='confirmPasswordLabel'\n                            className='label'\n                            htmlFor='confirmPassword'>\n                                Confirm Password:\n                        </label>\n                        <input\n                            className='input'\n                            id='confirmPassword'\n                            name='confirmPassword'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Confirm Password'\n                            value={this.state.confirmPassword}\n                            onChange={this.updateInput}>\n                        </input>\n                    </div>\n\n                    <div id='registerLink'>\n                        Already have an account?\n                        <Link to='/login'>\n                            Log in here\n                        </Link>\n                    </div>\n\n                    <div id='submitButtonWrapper'>\n                        <button\n                            type='submit'\n                            id='submitButton'>\n                                Submit\n                        </button>\n                    </div>\n                </form>\n\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport '../styles/login.css';\n\ninterface State {\n    email: string,\n    password: string,\n    errors: string[],\n    redirectAfterSumbit: boolean\n};\n\nexport default class Login extends Component {\n    state: State = {\n        email: '',\n        password: '',\n        errors: [],\n        redirectAfterSumbit: false\n    };\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let { id, value } = event.currentTarget;\n        this.setState({ [id]: value });\n    }\n\n    //Submit the form and save any errors that might have returned\n    submitPage = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        const inputs = JSON.stringify({\n            email:    this.state.email,\n            password: this.state.password\n        });\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: inputs\n        };\n\n        try {\n            (async() => {\n                const response = await fetch('/auth/login', options);\n                const errors: string[] = await response.json();\n                \n                if (!errors.length) {\n                    this.setState({\n                        redirectAfterSumbit: true\n                    });\n                }\n                else {\n                    this.setState({\n                        errors\n                    });\n                }\n            })();\n        }\n        catch (err) {\n            console.log('Error submitting login form:', err);\n        }\n    }\n\n    render() {\n        if (this.state.redirectAfterSumbit) {\n            return (<Redirect to='/home' />);\n        }\n\n        return (\n            <div id='loginWrapper'>\n                <div id='loginHeader'>Log In</div>\n\n                <form\n                    name='loginForm'\n                    onSubmit={this.submitPage}>\n\n                    <div>ERRORS:\n                        {\n                        this.state.errors.length\n                            ? this.state.errors\n                            : ''\n                        }\n                    </div>\n\n                    <div id='inputWrapper'>\n                        <label\n                            id='emailLabel'\n                            className='label'\n                            htmlFor='email'>\n                                Email Address:\n                        </label>\n                        <input\n                            className='input'\n                            id='email'\n                            name='email'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Email Address'\n                            value={this.state.email}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <label\n                            id='passwordLabel'\n                            className='label'\n                            htmlFor='password'>\n                                Password:\n                        </label>\n                        <input\n                            className='input'\n                            id='password'\n                            name='password'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Password'\n                            value={this.state.password}\n                            onChange={this.updateInput}>\n                        </input>\n                    </div>\n\n                    <div id='registerLink'>\n                        Don't have an account yet?\n                        <Link to='/register'>\n                            Register here\n                        </Link>\n                    </div>\n\n                    <div id='submitButtonWrapper'>\n                        <button\n                            type='submit'\n                            id='submitButton'>\n                                Submit\n                        </button>\n                    </div>\n                </form>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Banner from './components/banner';\nimport Recipe from './components/recipe';\nimport Home from './components/home';\nimport Register from './components/register';\nimport Login from './components/login';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\n\nimport './styles/App.css';\n\nexport default function App() {\n  return (\n    <div>\n      <Router>\n\n        <Banner />\n\n        <Switch>\n          <Route path={'/recipe/:recipeid'} component={Recipe} />\n          <Route path={'/home'} component={Home} />\n          <Route path={'/register'} component={Register} />\n          <Route path={'/login'} component={Login} />\n          <Route path={'/'}>\n            <Redirect to={'/home'} />\n          </Route>\n        </Switch>\n\n      </Router>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}