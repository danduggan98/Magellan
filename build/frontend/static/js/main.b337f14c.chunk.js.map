{"version":3,"sources":["images/food-placeholder.png","fonts/Montserrat-Regular.ttf","fonts/OpenSans-Regular.ttf","components/banner.tsx","components/recipe.tsx","components/searchCard.tsx","components/searchResults.tsx","components/searchBar.tsx","components/home.tsx","components/register.tsx","components/login.tsx","components/savedRecipeCard.tsx","components/user.tsx","App.tsx","index.tsx"],"names":["module","exports","withRouter","props","id","to","className","location","pathname","verified","onClick","logout","state","source","ArrayToList","items","i","list","length","section","itemList","j","next","push","key","header","ordered","Recipe","saveRecipe","a","setState","redirect","fetch","recipeID","response","json","userData","errors","console","log","recipeSaved","removeRecipe","recipeFound","loaded","match","params","recipeid","URL","imageURL","author","recipeName","difficulty","totalTime","prepTime","inactiveTime","activeTime","cookTime","yield","ingredients","directions","this","recipeDataResponse","recipeData","recipeSavedResponse","recipeSavedData","error","Helmet","target","rel","href","src","alt","size","margin","Component","SearchCard","data","info","link","_id","style","backgroundImage","placeholderImg","SearchResults","updateCurrentResults","curPage","currentPage","maxResults","numResultsPerPage","firstIdx","secondIdx","visibleResults","slice","map","recipe","currentResults","forceUpdate","goToPreviousPage","goToNextPage","lastPage","numResults","pageDensity","Math","ceil","SearchBar","searchType","input","emptyInput","resultsFound","loading","results","getResults","fetchURL","res","searchResults","updateInput","event","currentTarget","value","updateSearchType","override","css","name","onSubmit","type","autoComplete","placeholder","onChange","checked","height","title","Home","ErrorList","errorList","err","Register","email","password","confirmPassword","submitPage","preventDefault","submissionInProgress","options","method","headers","body","JSON","stringify","redirectAfterSumbit","destination","Login","updateLoginStatus","SavedRecipeCard","User","getUserData","savedRecipes","formattedRecipes","App","auth_error","authCheck","logoutStatus","bind","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b337f14c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/food-placeholder.0805d07b.png\";","module.exports = __webpack_public_path__ + \"static/media/Montserrat-Regular.ee653992.ttf\";","module.exports = __webpack_public_path__ + \"static/media/OpenSans-Regular.3ed9575d.ttf\";","import React, { FunctionComponent } from 'react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport '../styles/banner.css';\n\ninterface Props extends RouteComponentProps {\n    verified: boolean,\n    auth_error: string,\n    logout: () => Promise<void>\n}\n\nconst Banner: FunctionComponent<Props> = (props) => {\n    return (\n        <div id='banner'>\n            <div id='bannerLeft'>\n                <Link to='/home' className='logo'>\n                    Magellan\n                </Link>\n\n                { props.location.pathname === '/home'\n                  ? <p className='invisibleElement'></p>\n                  : <Link to='/home'\n                        className='linkButton'>\n                            <span className='linkButtonText'>Back to the home page</span>\n                    </Link>\n                }\n            </div>\n            \n            <div id='bannerRight'>\n                { props.verified\n                  ? <div>\n                        <Link to='/user'\n                            className='linkButton'>\n                                <span id='userLinkButtonText' className='linkButtonText'>View Your Saved Recipes</span>\n                        </Link>\n                        <button className='linkButton' onClick={props.logout}>\n                            <span className='linkButtonText'>Sign Out</span>\n                        </button>\n                    </div>\n                  : <Link\n                        to={{\n                            pathname: '/login',\n                            state: { source: props.location.pathname }\n                        }}\n                        className='linkButton'>\n                            <span className='linkButtonText'>Sign In</span>\n                    </Link>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(Banner);\n","import React, { Component, FunctionComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport { RouteComponentProps, Redirect } from 'react-router-dom';\nimport { RecipeData } from '../../../magellan';\nimport '../styles/recipe.css';\n\n//Define local types\n\ninterface ArrayToListProps {\n    list:    string[][],\n    ordered: boolean\n}\n\ninterface RecipeRouterProps {\n    recipeid: string\n}\n\ninterface Props extends RouteComponentProps<RecipeRouterProps> {\n    verified: boolean\n}\n\ninterface State {\n    recipeFound:  boolean,\n    recipeSaved:  boolean,\n    loaded:       boolean,\n    redirect:     boolean,\n    recipeID:     string,\n    URL:          string,\n    imageURL:     string,\n    author:       string,\n    recipeName:   string,\n    difficulty:   string | undefined,\n    totalTime:    string | undefined,\n    prepTime:     string | undefined,\n    inactiveTime: string | undefined,\n    activeTime:   string | undefined,\n    cookTime:     string | undefined,\n    yield:        string | undefined,\n    ingredients:  string[][],\n    directions:   string[][],\n    source:       string | undefined\n}\n\n//Parse an array of ingredients or directions into a JSX list\nconst ArrayToList: FunctionComponent<ArrayToListProps> = (props) => {\n    let items: JSX.Element[] = [];\n\n    //Iterate through each section\n    for (let i = 0; i < props.list.length; i++) {\n        let section: JSX.Element[] = [];\n        let itemList = props.list[i];\n\n        //Store each item in the inner array as an HTML list item\n        for (let j = 1; j < itemList.length; j++) { //Start at j = 1 to skip the header\n            let next = itemList[j];\n            section.push (\n                <li key={j}>\n                    {next}\n                </li>\n            );\n        }\n\n        //Print the section header if noteworthy\n        const header = itemList[0];\n\n        if (header !== 'main') {\n            items.push (\n                <div className='sectionHeader'\n                    key={i + 'h'}>\n                    {header}\n                </div>\n            );\n        }\n\n        //Print the list of items\n        items.push (\n            <div className='sectionData'\n                key={i}>\n                { props.ordered\n                  ? <ol>{section}</ol>\n                  : <ul>{section}</ul>\n                }\n            </div>\n        );\n    }\n\n    return (\n        <div>{items}</div>\n    );\n}\n\n//Display full recipe data\nexport default class Recipe extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            recipeFound:  true,\n            recipeSaved:  false,\n            loaded:       false,\n            redirect:     false,\n            recipeID:     this.props.match.params.recipeid, //URL parameter\n            URL:          '',\n            imageURL:     '',\n            author:       '',\n            recipeName:   '',\n            difficulty:   '',\n            totalTime:    '',\n            prepTime:     '',\n            inactiveTime: '',\n            activeTime:   '',\n            cookTime:     '',\n            yield:        '',\n            ingredients:  [],\n            directions:   [],\n            source:       ''\n        };\n    }\n\n    //Gather data from server JSON response\n    async componentDidMount() {\n        const recipeDataResponse = await fetch(`/api/recipe/${this.state.recipeID}`);\n        const recipeData: RecipeData = await recipeDataResponse.json();\n\n        const recipeSavedResponse = await fetch(`/user/recipeSaved/${this.state.recipeID}`);\n        const recipeSavedData = await recipeSavedResponse.json();\n        const recipeSaved: boolean = recipeSavedData.recipeSaved || false;\n\n        //Recipe not found\n        if (recipeData.error) {\n            this.setState({\n                recipeFound: false,\n                recipeSaved,\n                loaded: true\n            });\n        }\n        //Recipe found\n        else {\n            this.setState({\n                URL:          recipeData.URL,\n                imageURL:     recipeData.imageURL,\n                author:       recipeData.author,\n                recipeName:   recipeData.recipeName,\n                difficulty:   recipeData.difficulty,\n                totalTime:    recipeData.totalTime,\n                prepTime:     recipeData.prepTime,\n                inactiveTime: recipeData.inactiveTime,\n                activeTime:   recipeData.activeTime,\n                cookTime:     recipeData.cookTime,\n                yield:        recipeData.yield,\n                ingredients:  recipeData.ingredients,\n                directions:   recipeData.directions,\n                source:       recipeData.source,\n                recipeSaved,\n                loaded: true\n            });\n        }\n    }\n\n    //Add this recipe to the user's account\n    saveRecipe = async () => {\n\n        //If they are not logged in, redirect to the login page and then bring them back\n        if (!this.props.verified) {\n            this.setState({\n                redirect: true\n            })\n        }\n\n        //If they are logged in, save the recipe to their account\n        else {\n            const response = await fetch(`/user/saveRecipe/${this.state.recipeID}`);\n            const userData = await response.json();\n\n            if (userData.errors.length) {\n                console.log(userData.errors[0]);\n            }\n            else {\n                this.setState({\n                    recipeSaved: true\n                })\n            }\n        }\n    }\n\n    removeRecipe = async () => {\n\n        //If they are not logged in, redirect to the login page and then bring them back\n        if (!this.props.verified) {\n            this.setState({\n                redirect: true\n            })\n        }\n\n        //If they are logged in, remove the recipe from their account\n        else {\n            const response = await fetch(`/user/removeRecipe/${this.state.recipeID}`);\n            const userData = await response.json();\n\n            if (userData.errors.length) {\n                console.log(userData.errors[0]);\n            }\n            else {\n                this.setState({\n                    recipeSaved: false\n                })\n            }\n        }\n    }\n\n    render() {\n\n        //If the login redirect came from a recipe page, return to that page\n        if (this.state.redirect) {\n            return (\n                <Redirect\n                    to={{\n                        pathname: '/login',\n                        state: { source: `/recipe/${this.state.recipeID}` }\n                    }}>\n                </Redirect>\n            );\n        }\n\n        //Recipe lookup not yet finished\n        if (!this.state.loaded) {\n            return (\n                <div id='recipeLoadingNotice'>\n                    Loading\n                    <BeatLoader size={20} margin={5} />\n                </div>\n            );\n        }\n\n        //Recipe not found\n        else if (!this.state.recipeFound) {\n            return (\n                <div id='notFoundNotice'>\n                    Recipe not found!\n                    <div>Please try again</div>\n                </div>\n            );\n        }\n\n        //Recipe found\n        else {\n            return (\n                <div id='recipePage'>\n                    { this.state.recipeName\n                      ? <Helmet>\n                            <title>{'Magellan - ' + this.state.recipeName}</title>\n                        </Helmet>\n                      : <Helmet>\n                            <title>{'Magellan'}</title>\n                        </Helmet>\n                    }\n\n                    <div id='recipeDetails'>\n                        <div id='header'>\n                            <div id='recipeName'>\n                                {this.state.recipeName}\n                            </div>\n\n                            { this.state.author\n                              ? <div id='author'>\n                                    by {this.state.author}\n                                </div>\n                              : <p className='invisibleElement'></p>\n                            }\n\n                            <div id='source'>\n                                Courtesy of&nbsp;\n                                <span id='sourceText'>\n                                    {this.state.source}\n                                </span>\n                            </div>\n\n                            <button id='saveRecipeButton'\n                                onClick={\n                                    this.state.recipeSaved\n                                    ? this.removeRecipe\n                                    : this.saveRecipe\n                                }>\n                                { this.props.verified\n                                  ? this.state.recipeSaved\n                                    ? 'Remove Recipe'\n                                    : 'Save Recipe'\n                                  : 'Log in to save this recipe'\n                                }\n                            </button>\n\n                            <div id='details'>\n                                <div id='detailsLeft'>\n                                    { this.state.difficulty\n                                      ? <div id='difficulty'>\n                                            Difficulty:&nbsp;\n                                            <span id='difficultyText' className='detailHighlight'>\n                                                {this.state.difficulty}\n                                            </span>\n                                        </div>\n                                      : <p className='invisibleElement'></p>\n                                    }\n                                    \n                                    { this.state.yield\n                                      ? <div id='yield'>\n                                            Yield:&nbsp;\n                                            <span id='yieldText' className='detailHighlight'>\n                                                {this.state.yield}\n                                            </span>\n                                        </div>\n                                      : <p className='invisibleElement'></p>\n                                    }\n                                </div>\n\n                                <div id='times'>\n                                    { this.state.totalTime\n                                      ? <div id='totalTime'>\n                                            Total Time:&nbsp;\n                                            <span id='totalTimeText' className='detailHighlight'>\n                                                {this.state.totalTime}\n                                            </span>\n                                        </div>\n                                      : <p className='invisibleElement'></p>\n                                    }\n                                    \n                                    <div id='timesList'>\n                                        <ul>\n                                            <div id='prepTime'>\n                                                { this.state.prepTime\n                                                  ? <li>\n                                                        Prep:&nbsp;\n                                                        <span id='prepTimeText' className='detailHighlight'>\n                                                            {this.state.prepTime}\n                                                        </span>\n                                                    </li>\n                                                  : <p className='invisibleElement'></p>\n                                                }\n                                            </div>\n                                            \n                                            <div id='cookTime'>\n                                                { this.state.cookTime\n                                                  ? <li>\n                                                        Cook:&nbsp;\n                                                        <span id='cookTimeText' className='detailHighlight'>\n                                                            {this.state.cookTime}\n                                                        </span>\n                                                    </li>\n                                                  : <p className='invisibleElement'></p>\n                                                }\n                                            </div>\n                                            \n                                            <div id='activeTime'>\n                                                { this.state.activeTime\n                                                  ? <li>\n                                                        Active:&nbsp;\n                                                        <span id='activeTimeText' className='detailHighlight'>\n                                                            {this.state.activeTime}\n                                                        </span>\n                                                    </li>\n                                                  : <p className='invisibleElement'></p>\n                                                }\n                                            </div>\n                                            \n                                            <div id='inactiveTime'>\n                                                { this.state.inactiveTime\n                                                  ? <li>\n                                                        Inactive:&nbsp;\n                                                        <span id='inactiveTimeText' className='detailHighlight'>\n                                                            {this.state.inactiveTime}\n                                                        </span>\n                                                    </li>\n                                                  : <p className='invisibleElement'></p>\n                                                }\n                                            </div>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            { !this.state.imageURL\n                              ? <div id='sourceLink'>\n                                    <a target='_blank' rel='noopener noreferrer' href={this.state.URL}>Original Recipe</a>\n                                </div>\n                              : <p className='invisibleElement'></p>\n                            }\n                        </div>\n\n                        { this.state.imageURL\n                          ? <div id='imageContainer'>\n                                <img id='recipePhoto' src={this.state.imageURL} alt=''></img>\n                                <div id='sourceLink'>\n                                    <a target='_blank' rel='noopener noreferrer' href={this.state.URL}>Original Recipe</a>\n                                </div>\n                            </div>\n                          : <p className='invisibleElement'></p>\n                        }\n                    </div>\n\n                    <div id='procedure'>\n                        <div id='ingredients'>\n                            <div className='listHeader'>\n                                Ingredients\n                            </div>\n\n                            <ArrayToList\n                                list={this.state.ingredients}\n                                ordered={false}\n                            />\n                        </div>\n\n                        <div id='directions'>\n                            <div className='listHeader'>\n                                Directions\n                            </div>\n\n                            <ArrayToList\n                                list={this.state.directions}\n                                ordered={true}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\nimport { RecipeDataResult } from '../../../magellan';\nimport placeholderImg from './../images/food-placeholder.png';\nimport '../styles/searchCard.css';\n\ninterface Props {\n    info: RecipeDataResult\n}\n\nconst SearchCard: FunctionComponent<Props> = (props) => {\n    const data = props.info;\n    const link = `/recipe/${data._id}`;\n\n    return (\n        <div id='card'>\n            <div id='cardContents'>\n                <div id='cardInfo'>\n                    <div id='cardRecipeName'>\n                        <a className='cardRecipeLink'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                            href={link}>\n\n                            {data.recipeName}\n                            &nbsp;&nbsp;\n                        </a>\n                    </div>\n\n                    { data.totalTime\n                      ? <a className='cardRecipeLink'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                            href={link}>\n                                \n                            <div id='cardTotalTime'>\n                                Total Time:&nbsp;\n                                {data.totalTime}\n                                &nbsp;&nbsp;\n                            </div>\n                        </a>\n                      : <p className='invisibleElement'></p>\n                    }\n                </div>\n\n                <a className='cardRecipeLink'\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={link}>\n\n                    <div id='cardPhoto'\n                        style={{\n                            backgroundImage: `url(${\n                                data.imageURL || placeholderImg\n                            })`\n                        }}>\n                    </div>\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default SearchCard;\n","import React, { Component } from 'react';\nimport SearchCard from './searchCard';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchResults.css';\n\ninterface Props {\n    data: RecipeDataResult[]\n}\n\ninterface State {\n    currentResults: JSX.Element[],\n    numResults: number,\n    numResultsPerPage: number,\n    lastPage: number,\n    currentPage: number\n}\n\nexport default class SearchResults extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            currentResults: [],\n            numResults: 0,\n            numResultsPerPage: 6, //Arbitrary\n            lastPage: 0,\n            currentPage: 1\n        };\n    }\n\n    //Returns the recipes to show on the current page\n    updateCurrentResults = (): void => {\n\n        //Calculate the range of results to use\n        const curPage = this.state.currentPage;\n        const maxResults = this.state.numResultsPerPage;\n\n        let firstIdx = (curPage - 1) * maxResults;\n        let secondIdx = curPage * maxResults;\n\n        //Turn them into search cards\n        const visibleResults = this.props.data\n            .slice(firstIdx, secondIdx)\n            .map((recipe, i) => (\n                <SearchCard\n                    key={i}\n                    info={recipe}>\n                </SearchCard>\n            )\n        );\n\n        this.setState({\n            currentResults: visibleResults\n        }, () => {\n            this.forceUpdate();\n        });\n    }\n\n    goToPreviousPage = (): void => {\n        const curPage = this.state.currentPage;\n\n        if (curPage > 1) {\n            this.setState({\n                currentPage: curPage - 1\n            }, () => {\n                this.updateCurrentResults();\n            });\n        }\n    }\n\n    goToNextPage = (): void => {\n        const curPage = this.state.currentPage;\n        const lastPage = this.state.lastPage;\n\n        if (curPage < lastPage) {\n            this.setState({\n                currentPage: curPage + 1\n            }, () => {\n                this.updateCurrentResults();\n            });\n        }\n    }\n\n    //When the component loads, calculate the number of pages needed\n    componentDidMount() {\n        const numResults = this.props.data.length;\n        const pageDensity = this.state.numResultsPerPage;\n        \n        this.setState({\n            numResults: numResults,\n            lastPage: Math.ceil(numResults / pageDensity)\n        }, () => {\n            this.updateCurrentResults();\n        });\n    }\n\n    render() {\n        return (\n            <div id='searchResultsWrapper'>\n                <div id='topResultsLabel'>\n                    Top Results:\n                </div>\n\n                <div id='resultsContainer'>\n                    <div id='scrollLeftButton'>\n                        { this.state.currentPage > 1\n                          ? <button\n                                className='scrollButton'\n                                onClick={this.goToPreviousPage}>\n                                    ◀\n                                    <div className='scrollLabel'>\n                                        Previous<br/>Page\n                                    </div>\n                            </button>\n                          : <div className='scrollPlaceholder'> </div>\n                        }\n                    </div>\n\n                    <div id='resultsList'>\n                        {this.state.currentResults}\n                    </div>\n\n                    <div id='scrollRightButton'>\n                        { this.state.currentPage < this.state.lastPage\n                          ? <button\n                                className='scrollButton'\n                                onClick={this.goToNextPage}>\n                                    ▶\n                                    <div className='scrollLabel'>\n                                        Next<br/>Page\n                                    </div>\n                            </button>\n                          : <div className='scrollPlaceholder'> </div>\n                        }\n                    </div>\n                </div>\n\n                <div id='pageDetails'>\n                    <div>Viewing page {this.state.currentPage} of {this.state.lastPage}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\nimport SearchResults from './searchResults';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchBar.css';\n\n//Define local types\n\nexport type SearchType = 'name' | 'ing';\n\ninterface State {\n    searchType:   SearchType,\n    input:        string,\n    emptyInput:   boolean,\n    resultsFound: boolean,\n    loading:      boolean,\n    results:      RecipeDataResult[],\n    maxResults:   number\n}\n\nexport default class SearchBar extends Component {\n    state: State = {\n        searchType:   'name',\n        input:        '',\n        emptyInput:   false,\n        resultsFound: true,\n        loading:      false,\n        results:      [],\n        maxResults:   60 //Arbitrary\n    };\n\n    //Launch a search in the server and store the results\n    getResults = async () => {\n\n        //Make sure they entered something\n        if (this.state.input) {\n            \n            //Query the db\n            const fetchURL = `/api/search/${this.state.searchType}/${this.state.input}/${this.state.maxResults}`;\n            this.setState({\n                results: [],\n                resultsFound: true,\n                loading: true,\n                emptyInput: false\n            });\n\n            const res = await fetch(fetchURL); //Execute the search\n            const data = await res.json();\n\n            //No search results\n            if (data.error) {\n                this.setState({\n                    resultsFound: false,\n                    loading: false\n                });\n            }\n\n            //Store the results in state\n            else {\n                this.setState({\n                    resultsFound: true,\n                    loading: false,\n                    results: data.searchResults\n                });\n            }\n        }\n        else {\n            this.setState({\n                emptyInput: true,\n                resultsFound: true, //Hide this notice if last search found nothing\n                results: []\n            });\n        }\n    }\n\n    //Save the user's current input in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ input: event.currentTarget.value });\n    }\n\n    //Change the search type when the radio buttons are clicked\n    updateSearchType = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ searchType: event.currentTarget.value });\n    }\n\n    // Search bar - form accepts the search and queries the db\n    render() {\n        //CSS for loading bar\n        const override = css`\n            width: 300px;\n            margin: 10px auto 0px auto;\n            background-color: lightgrey;\n            border: none;\n            border-radius: 10px;\n        `;\n\n        return (\n            <div>\n                <div id='searchContainer'>\n                    <div id='title'>\n                        Find your next meal\n                    </div>\n\n                    <form\n                        name='searchBar'\n                        target='hiddenFrame'\n                        onSubmit={this.getResults}>\n\n                        <div id='searchBarWrapper'>\n                            <input\n                                name='search'\n                                id='searchInput'\n                                type='text'\n                                autoComplete='off'\n                                placeholder='Search for recipes'\n                                onChange={this.updateInput}>\n                            </input>\n\n                            <button\n                                type='submit'\n                                id='searchButton'\n                                className='fa fa-search'>\n                            </button>\n                        </div>\n                    \n                        <div id='searchType'>\n                            Search by:\n\n                            <label className='searchTypeContainer'>\n                                Recipe Name\n                                <input\n                                    type='radio'\n                                    name='searchType'\n                                    value='name'\n                                    onChange={this.updateSearchType}\n                                    checked={this.state.searchType === 'name'}>\n                                </input>\n                                <span className='searchTypeButton'></span>\n                            </label>\n\n                            <label className='searchTypeContainer'>\n                                Ingredients\n                                <input\n                                    type='radio'\n                                    name='searchType'\n                                    value='ing'\n                                    onChange={this.updateSearchType}\n                                    checked={this.state.searchType === 'ing'}>\n                                </input>\n                                <span className='searchTypeButton'></span>\n                            </label>\n                        </div>\n\n                        <div id='inputReminder' className='searchNotice'>\n                            { this.state.emptyInput\n                              ? <div>Please enter something to search</div>\n                              : <p className='invisibleElement'></p>\n                            }\n                        </div>\n\n                        <div id='loadingBar' className='searchNotice'>\n                            { this.state.loading\n                              ? <div>\n                                    Searching...\n                                    <BarLoader height={9} css={override}/>\n                                </div>\n                              : <p className='invisibleElement'></p>\n                            }\n                        </div>\n                    </form>\n                \n                    {/* Form redirects to this invisible iframe, keeping it on the same page */}\n                    <iframe name='hiddenFrame' className='invisibleElement' title='hidden'></iframe>\n                </div>\n\n                <div id='results'>\n                    { !this.state.resultsFound\n                      ? <div id='failNotice' className='searchNotice'>No results found. Please try again</div>\n                      : <p className='invisibleElement'></p>\n                    }\n                    { this.state.results.length\n                      ? <SearchResults data={this.state.results}/>\n                      : <p className='invisibleElement'></p>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport SearchBar from './searchBar';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>{'Magellan'}</title>\n                </Helmet>\n                \n                <SearchBar />\n            </div>\n        );\n    }\n}\n","import React, { Component, FunctionComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport { Redirect, Link, RouteComponentProps } from 'react-router-dom';\nimport '../styles/authPage.css';\n\ninterface RegisterRouterProps {\n    source: string\n}\n\ninterface Props extends RouteComponentProps<RegisterRouterProps>{\n    verified: boolean\n}\n\ninterface State {\n    email:                string,\n    password:             string,\n    confirmPassword:      string,\n    errors:               string[],\n    redirectAfterSumbit:  boolean,\n    submissionInProgress: boolean\n};\n\ninterface ErrorListProps {\n    errorList: string[]\n}\n\nconst ErrorList: FunctionComponent<ErrorListProps> = (props) => {\n    return (\n        <div>\n            { props.errorList.length\n              ? props.errorList.map(err =>\n                    <div className='authError' key={err}>\n                        {err}\n                    </div>\n                )\n              : <p className='invisibleElement'></p>\n            }\n        </div>\n    );\n}\n\nexport default class Register extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            email:                '',\n            password:             '',\n            confirmPassword:      '',\n            errors:               [],\n            redirectAfterSumbit:  false,\n            submissionInProgress: false\n        };\n    }\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let { id, value } = event.currentTarget;\n\n        switch(id) {\n            case 'email':\n                this.setState({\n                    email: value\n                });\n                break;\n            case 'password':\n                this.setState({\n                    password: value\n                });\n                break;\n            case 'confirmPassword':\n                this.setState({\n                    confirmPassword: value\n                });\n                break\n            ;\n        }\n    }\n\n    //Submit the form and save any errors that might have returned\n    submitPage = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        this.setState({\n            submissionInProgress: true\n        })\n\n        const inputs = JSON.stringify({\n            email:           this.state.email,\n            password:        this.state.password,\n            confirmPassword: this.state.confirmPassword\n        });\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: inputs\n        };\n\n        try {\n            (async() => {\n                const response = await fetch('/auth/register', options);\n                const errors: string[] = await response.json();\n                \n                if (!errors.length) {\n                    this.setState({\n                        redirectAfterSumbit:  true,\n                        submissionInProgress: false\n                    });\n                }\n                else {\n                    this.setState({\n                        errors,\n                        submissionInProgress: false\n                    });\n                }\n            })();\n        }\n        catch (err) {\n            console.log('Error submitting registration form:', err);\n        }\n    }\n\n    render() {\n        //Already signed in\n        if (this.props.verified) {\n            return (\n                <div>\n                    <Helmet>\n                        <title>{'Magellan - Register'}</title>\n                    </Helmet>\n\n                    <div className='alreadyAuthorizedNotice'>\n                        You already have an account!\n\n                        <div>\n                            Click&nbsp;\n                            <span>\n                                <Link to='/home'>\n                                    here\n                                </Link>\n                            </span>\n                            &nbsp;to return to the home page\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        //Determine where to redirect after submission\n        const location = this.props.location.state as any;\n        const destination = location ? location.source : '/home';\n\n        //Successful submission - move on\n        if (this.state.redirectAfterSumbit) {\n            return (\n                <Redirect\n                    to={{\n                        pathname: '/login',\n                        state: { source: destination }\n                    }}>\n                </Redirect>\n            );\n        }\n\n        return (\n            <div className='authWrapper'>\n                <Helmet>\n                    <title>{'Magellan - Register'}</title>\n                </Helmet>\n                \n                <div className='authHeader'>Create an account</div>\n\n                <form\n                    name='registerForm'\n                    onSubmit={this.submitPage}>\n\n                    <div className='authInputWrapper'>\n                        <input\n                            className='authInput'\n                            id='email'\n                            name='email'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Email Address'\n                            value={this.state.email}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <input\n                            className='authInput'\n                            id='password'\n                            name='password'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Password'\n                            value={this.state.password}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <input\n                            className='authInput'\n                            id='confirmPassword'\n                            name='confirmPassword'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Confirm Password'\n                            value={this.state.confirmPassword}\n                            onChange={this.updateInput}>\n                        </input>\n                    </div>\n\n                    <div className='authLink'>\n                        Already have an account?&nbsp;\n                        <Link\n                            to={{\n                                pathname: '/login',\n                                state: { source: destination }\n                            }}>\n                                Log in here\n                        </Link>\n                    </div>\n\n                    <div className='authSubmitButtonWrapper'>\n                        <button\n                            type='submit'\n                            className='linkButton'>\n                                <span className='linkButtonText'>Submit</span>\n                        </button>\n                    </div>\n                </form>\n\n                { this.state.submissionInProgress\n                  ? <div className='authorizingNotice'>\n                        Registering\n                        <BeatLoader size={16} margin={6}/>\n                    </div>\n                  : <div className='authErrorList'>\n                        <ErrorList errorList={this.state.errors}/>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component, FunctionComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport { Redirect, Link, RouteComponentProps } from 'react-router-dom';\nimport '../styles/authPage.css';\n\ninterface LoginRouterProps {\n    source: string\n}\n\ninterface Props extends RouteComponentProps<LoginRouterProps> {\n    verified: boolean,\n    updateLoginStatus: () => Promise<void>\n}\n\ninterface State {\n    email:                string,\n    password:             string,\n    errors:               string[],\n    redirectAfterSumbit:  boolean,\n    submissionInProgress: boolean\n};\n\ninterface ErrorListProps {\n    errorList: string[]\n}\n\nconst ErrorList: FunctionComponent<ErrorListProps> = (props) => {\n    return (\n        <div>\n            { props.errorList.length\n              ? props.errorList.map(err =>\n                    <div className='authError' key={err}>\n                        {err}\n                    </div>\n                )\n              : <p className='invisibleElement'></p>\n            }\n        </div>\n    );\n}\n\nexport default class Login extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.updateLoginStatus = props.updateLoginStatus;\n        this.state = {\n            email:                '',\n            password:             '',\n            errors:               [],\n            redirectAfterSumbit:  false,\n            submissionInProgress: false\n        };\n    }\n\n    updateLoginStatus() {}\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let { id, value } = event.currentTarget;\n\n        id === 'email'\n          ? this.setState({\n                email: value\n            })\n\n          : this.setState({\n                password: value\n            })\n        ;\n    }\n\n    //Submit the form and save any errors that might have returned\n    submitPage = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        this.setState({\n            submissionInProgress: true\n        })\n\n        const inputs = JSON.stringify({\n            email:    this.state.email,\n            password: this.state.password\n        });\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: inputs\n        };\n\n        try {\n            (async() => {\n                const response = await fetch('/auth/login', options);\n                const errors: string[] = await response.json();\n                \n                if (!errors.length) {\n                    this.updateLoginStatus();\n                    this.setState({\n                        redirectAfterSumbit:  true,\n                        submissionInProgress: false\n                    });\n                }\n                else {\n                    this.setState({\n                        errors,\n                        submissionInProgress: false\n                    });\n                }\n            })();\n        }\n        catch (err) {\n            console.log('Error submitting login form:', err);\n        }\n    }\n\n    render() {\n        //Already signed in\n        if (this.props.verified) {\n            return (\n                <div>\n                    <Helmet>\n                        <title>{'Magellan - Sign In'}</title>\n                    </Helmet>\n\n                    <div className='alreadyAuthorizedNotice'>\n                        You are already signed in\n\n                        <div>\n                            Click&nbsp;\n                            <span>\n                                <Link to='/home'>\n                                    here\n                                </Link>\n                            </span>\n                            &nbsp;to return to the home page\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        //Determine where to redirect after submission\n        const location = this.props.location.state as any;\n        const destination = location ? location.source : '/home';\n        \n        //Successful submission - move on\n        if (this.state.redirectAfterSumbit) {\n            return (<Redirect to={destination} />);\n        }\n\n        return (\n            <div className='authWrapper'>\n                <Helmet>\n                    <title>{'Magellan - Sign In'}</title>\n                </Helmet>\n                \n                <div className='authHeader'>Sign In</div>\n\n                <form\n                    name='loginForm'\n                    onSubmit={this.submitPage}>\n\n                    <div className='authInputWrapper'>\n                        <input\n                            className='authInput'\n                            id='email'\n                            name='email'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Email Address'\n                            value={this.state.email}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <input\n                            className='authInput'\n                            id='password'\n                            name='password'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Password'\n                            value={this.state.password}\n                            onChange={this.updateInput}>\n                        </input>\n                    </div>\n\n                    <div className='authLink'>\n                        Don't have an account yet?&nbsp;\n                        <Link\n                            to={{\n                                pathname: '/register',\n                                state: { source: destination }\n                            }}>\n                                Register here\n                        </Link>\n                    </div>\n\n                    <div className='authSubmitButtonWrapper'>\n                        <button\n                            type='submit'\n                            className='linkButton'>\n                                <span className='linkButtonText'>Submit</span>\n                        </button>\n                    </div>\n                </form>\n\n                { this.state.submissionInProgress\n                  ? <div className='authorizingNotice'>\n                        Logging In\n                        <BeatLoader size={16} margin={6}/>\n                    </div>\n                  : <div className='authErrorList'>\n                        <ErrorList errorList={this.state.errors}/>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React, { FunctionComponent } from 'react';\nimport { SavedRecipe } from '../../../magellan';\nimport placeholderImg from './../images/food-placeholder.png';\nimport '../styles/savedRecipeCard.css';\n\ninterface Props {\n    info: SavedRecipe\n}\n\nconst SavedRecipeCard: FunctionComponent<Props> = (props) => {\n    const data = props.info;\n    const link = `/recipe/${data._id}`;\n\n    return (\n        <div id='savedRecipeCard'>\n            <a className='savedRecipeCardLink'\n                target='_blank'\n                rel='noopener noreferrer'\n                href={link}>\n\n                <div id='savedRecipeCardContents'>\n                    <div id='savedRecipeCardLeft'>\n                        <div id='savedRecipeCardName'>\n                            {data.recipeName}\n                        </div>\n                        \n                        { data.author\n                          ? <div id='savedRecipeCardAuthor'>by {data.author}</div>\n                          : <p className='invisibleElement'></p>\n                        }\n                    </div>\n\n                    <img id='savedRecipePhoto'\n                        src={data.imageURL || placeholderImg}\n                        alt=''>\n                    </img>\n                </div>\n            </a>\n        </div>\n    );\n}\n\nexport default SavedRecipeCard;\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport BeatLoader from 'react-spinners/BeatLoader';\nimport SavedRecipeCard from './savedRecipeCard';\nimport { SavedRecipe } from '../../../magellan';\nimport '../styles/user.css';\n\ninterface Props {\n    verified: boolean\n}\n\ninterface State {\n    email: string,\n    savedRecipes: SavedRecipe[],\n    loaded: boolean,\n};\n\nexport default class User extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            email: '',\n            savedRecipes: [],\n            loaded: false,\n        };\n    }\n\n    async componentDidMount() {\n        await this.getUserData();\n    }\n\n    //Get the email and saved recipes for the current user\n    getUserData = async () => {\n        try {\n            const response = await fetch('/user/userData');\n            const userData = await response.json();\n    \n            this.setState({\n                email: userData.email || '',\n                savedRecipes: userData.savedRecipes || [],\n                loaded: true\n            })\n        }\n        catch (err) {\n            console.log('Error retrieving user data:', err);\n        }\n    }\n\n    render() {\n        const formattedRecipes = this.state.savedRecipes\n            .map((recipe, i) => (\n                <SavedRecipeCard\n                    key={i}\n                    info={recipe}>\n                </SavedRecipeCard>\n            )\n        );\n        \n        if (!this.props.verified) {\n            return (\n                <div>\n                    <Helmet>\n                        <title>{'Magellan - Profile'}</title>\n                    </Helmet>\n\n                    <div id='notYetLoggedInNotice'>\n                        You must be signed in to view your profile\n\n                        <div>\n                            Click&nbsp;\n                            <span>\n                                <Link\n                                    to={{\n                                        pathname: '/login',\n                                        state: { source: '/user' }\n                                    }}>\n                                        here\n                                </Link>\n                            </span>\n                            &nbsp;to sign in\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        //Saved recipe lookup not yet finished\n        if (!this.state.loaded) {\n            return (\n                <div id='userLoadingNotice'>\n                    Loading\n                    <BeatLoader size={20} margin={5} />\n                </div>\n            );\n        }\n    \n        return (\n            <div id='userDetails'>\n                <Helmet>\n                    <title>{'Magellan - Profile'}</title>\n                </Helmet>\n\n                <div id='welcomeNotice'>\n                    Welcome!\n                </div>\n\n                <div id='emailNotice'>\n                    You are signed in as\n                    <div id='emailValue'>{this.state.email}</div>\n                </div>\n\n                { formattedRecipes.length\n                  ? <div id='savedRecipes'>\n                        <div id='savedRecipesNotice'>\n                            Your saved recipes:\n                        </div>\n\n                        <div id='recipeList'>\n                            {formattedRecipes}\n                        </div>\n                    </div>\n\n                  : <div id='noSavedRecipesNotice'>\n                        You do not have any saved recipes\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Banner from './components/banner';\nimport Recipe from './components/recipe';\nimport Home from './components/home';\nimport Register from './components/register';\nimport Login from './components/login';\nimport User from './components/user';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from 'react-router-dom';\n\ninterface State {\n    verified: boolean,\n    auth_error: string\n};\n\nexport default class App extends Component {\n    state: State = {\n        verified: false,\n        auth_error: ''\n    };\n\n    async updateLoginStatus() {\n        const response  = await fetch('/auth/verified');\n        const authCheck = await response.json();\n\n        this.setState({\n            verified:   authCheck.verified,\n            auth_error: authCheck.auth_error\n        });\n    }\n\n    componentDidMount() {\n        this.updateLoginStatus();\n    }\n\n    async logout() {\n        const response  = await fetch('/auth/logout');\n        const logoutStatus = await response.json();\n\n        this.setState({\n            verified:   logoutStatus.verified,\n            auth_error: logoutStatus.auth_error\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Router>\n                    <Banner\n                        verified={this.state.verified}\n                        auth_error={this.state.auth_error}\n                        logout={this.logout.bind(this)}>\n                    </Banner>\n\n                    <Switch>\n                        <Route\n                            path={'/home'}\n                            component={Home}>\n                        </Route>\n\n                        <Route\n                            path={'/recipe/:recipeid'}\n                            render={(props) => (\n                                <Recipe\n                                    {...props}\n                                    verified={this.state.verified}>\n                                </Recipe>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/register'}\n                            render={(props) => (\n                                <Register\n                                    {...props}\n                                    verified={this.state.verified}>\n                                </Register>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/login'}\n                            render={(props) => (\n                                <Login\n                                    {...props}\n                                    verified={this.state.verified}\n                                    updateLoginStatus={this.updateLoginStatus.bind(this)}>\n                                </Login>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/user'}\n                            render={(props) => (\n                                <User\n                                    {...props}\n                                    verified={this.state.verified}>\n                                </User>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/'}>\n                            <Redirect to={'/home'} />\n                        </Route>\n                    </Switch>\n\n                </Router>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\n//Import fonts\nimport './fonts/Montserrat-Regular.ttf';\nimport './fonts/OpenSans-Regular.ttf';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}