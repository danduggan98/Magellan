{"version":3,"sources":["components/banner.tsx","components/recipe.tsx","components/searchCard.tsx","components/searchResults.tsx","components/searchBar.tsx","components/home.tsx","components/register.tsx","components/login.tsx","components/savedRecipeCard.tsx","components/user.tsx","App.tsx","index.tsx"],"names":["withRouter","props","id","to","className","verified","onClick","logout","pathname","state","source","location","ArrayToList","items","i","list","length","section","itemList","j","next","push","key","header","ordered","toString","Recipe","saveRecipe","a","setState","redirect","fetch","recipeID","response","json","userData","errors","console","log","recipeSaved","removeRecipe","recipeFound","match","params","recipeid","URL","imageURL","author","recipeName","difficulty","totalTime","prepTime","inactiveTime","activeTime","cookTime","yield","ingredients","directions","this","recipeDataResponse","recipeData","recipeSavedResponse","recipeSavedData","error","Helmet","src","alt","width","target","rel","href","Component","SearchCard","data","info","link","_id","SearchResults","updateCurrentResults","curPage","currentPage","maxResults","numResultsPerPage","firstIdx","secondIdx","visibleResults","slice","map","recipe","currentResults","forceUpdate","goToPreviousPage","goToNextPage","lastPage","numResults","pageDensity","Math","ceil","SearchBar","searchType","input","emptyInput","resultsFound","loading","results","getResults","fetchURL","res","searchResults","updateInput","event","currentTarget","value","updateSearchType","override","css","name","onSubmit","type","autoComplete","placeholder","onChange","checked","htmlFor","height","title","Home","Register","email","password","confirmPassword","submitPage","preventDefault","options","method","headers","body","JSON","stringify","redirectAfterSumbit","err","destination","Login","updateLoginStatus","SavedRecipeCard","User","getUserData","savedRecipes","formattedRecipes","App","auth_error","authCheck","logoutStatus","bind","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d1329f4b.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport '../styles/banner.css'\n\ninterface Props extends RouteComponentProps {\n    verified: boolean,\n    auth_error: string,\n    logout: () => Promise<void>\n}\n\nconst Banner: FunctionComponent<Props> = (props) => {\n    return (\n        <div id='logoBanner'>\n            <Link to='/home' className='logo'>\n                MAGELLAN\n            </Link>\n\n            { props.verified\n              ? <Link to='/user' className='loginButton'>View Your Saved Recipes</Link>\n              : <div></div>\n            }\n\n            { props.verified\n              ? <button className='logoutButton' onClick={props.logout}>Log Out</button>\n              : <Link\n                    to={{\n                        pathname: '/login',\n                        state: { source: props.location.pathname }\n                    }}\n                    className='loginButton'>\n                        Log In\n                </Link>\n            }\n        </div>\n    );\n}\n\nexport default withRouter(Banner);\n","import React, { Component, FunctionComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport '../styles/recipe.css';\nimport { RouteComponentProps, Redirect } from 'react-router-dom';\nimport { RecipeData } from '../../../magellan';\n\n//Define local types\n\ninterface ArrayToListProps {\n    list:    string[][],\n    ordered: boolean\n}\n\ninterface RecipeRouterProps {\n    recipeid: string\n}\n\ninterface Props extends RouteComponentProps<RecipeRouterProps> {\n    verified: boolean\n}\n\ninterface State {\n    recipeFound:  boolean,\n    recipeSaved:  boolean,\n    redirect:     boolean,\n    recipeID:     string,\n    URL:          string,\n    imageURL:     string,\n    author:       string,\n    recipeName:   string,\n    difficulty:   string | undefined,\n    totalTime:    string | undefined,\n    prepTime:     string | undefined,\n    inactiveTime: string | undefined,\n    activeTime:   string | undefined,\n    cookTime:     string | undefined,\n    yield:        string | undefined,\n    ingredients:  string[][],\n    directions:   string[][],\n    source:       string | undefined\n}\n\n//Parse an array of ingredients or directions into a JSX list\nconst ArrayToList: FunctionComponent<ArrayToListProps> = (props) => {\n    let items: JSX.Element[] = [];\n\n    //Iterate through each section\n    for (let i = 0; i < props.list.length; i++) {\n        let section: JSX.Element[] = [];\n        let itemList = props.list[i];\n\n        //Store each item in the inner array as an HTML list item\n        for (let j = 1; j < itemList.length; j++) { //Start at j = 1 to skip the header\n            let next = itemList[j];\n            section.push (\n                <li key={next}>\n                    {next}\n                </li>\n            );\n        }\n\n        //Print the section header if noteworthy\n        const header = itemList[0];\n\n        if (header !== 'main') {\n            items.push (\n                <div className='sectionHeader'\n                    key={header}>\n                    {header}\n                </div>\n            );\n        }\n\n        //Print the list of items\n        items.push (\n            <div className='sectionData'>\n                { props.ordered\n                  ? <ol key={section.toString()}>\n                        {section}\n                    </ol>\n                  : <ul key={section.toString()}>\n                        {section}\n                    </ul>\n                }\n            </div>\n        );\n    }\n\n    return (\n        <div>{items}</div>\n    );\n}\n\n//Display full recipe data\nexport default class Recipe extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            recipeFound:  true,\n            recipeSaved:  false,\n            redirect:     false,\n            recipeID:     this.props.match.params.recipeid, //URL parameter\n            URL:          '',\n            imageURL:     '',\n            author:       '',\n            recipeName:   '',\n            difficulty:   '',\n            totalTime:    '',\n            prepTime:     '',\n            inactiveTime: '',\n            activeTime:   '',\n            cookTime:     '',\n            yield:        '',\n            ingredients:  [],\n            directions:   [],\n            source:       ''\n        };\n    }\n\n    //Gather data from server JSON response\n    async componentDidMount() {\n        const recipeDataResponse = await fetch(`/api/recipe/${this.state.recipeID}`);\n        const recipeData: RecipeData = await recipeDataResponse.json();\n\n        const recipeSavedResponse = await fetch(`/user/recipeSaved/${this.state.recipeID}`);\n        const recipeSavedData = await recipeSavedResponse.json();\n        const recipeSaved: boolean = recipeSavedData.recipeSaved || false;\n\n        //Recipe not found\n        if (recipeData.error) {\n            this.setState({\n                recipeFound: false,\n                recipeSaved\n            });\n        }\n        //Recipe found\n        else {\n            this.setState({\n                URL:          recipeData.URL,\n                imageURL:     recipeData.imageURL,\n                author:       recipeData.author,\n                recipeName:   recipeData.recipeName,\n                difficulty:   recipeData.difficulty,\n                totalTime:    recipeData.totalTime,\n                prepTime:     recipeData.prepTime,\n                inactiveTime: recipeData.inactiveTime,\n                activeTime:   recipeData.activeTime,\n                cookTime:     recipeData.cookTime,\n                yield:        recipeData.yield,\n                ingredients:  recipeData.ingredients,\n                directions:   recipeData.directions,\n                source:       recipeData.source,\n                recipeSaved\n            });\n        }\n    }\n\n    //Add this recipe to the user's account\n    saveRecipe = async () => {\n\n        //If they are not logged in, redirect to the login page and then bring them back\n        if (!this.props.verified) {\n            this.setState({\n                redirect: true\n            })\n        }\n\n        //If they are logged in, save the recipe to their account\n        else {\n            const response = await fetch(`/user/saveRecipe/${this.state.recipeID}`);\n            const userData = await response.json();\n\n            if (userData.errors.length) {\n                console.log(userData.errors[0]);\n            }\n            else {\n                this.setState({\n                    recipeSaved: true\n                })\n            }\n        }\n    }\n\n    removeRecipe = async () => {\n\n        //If they are not logged in, redirect to the login page and then bring them back\n        if (!this.props.verified) {\n            this.setState({\n                redirect: true\n            })\n        }\n\n        //If they are logged in, remove the recipe from their account\n        else {\n            const response = await fetch(`/user/removeRecipe/${this.state.recipeID}`);\n            const userData = await response.json();\n\n            if (userData.errors.length) {\n                console.log(userData.errors[0]);\n            }\n            else {\n                this.setState({\n                    recipeSaved: false\n                })\n            }\n        }\n    }\n\n    render() {\n        //If the login redirect came from a recipe page, return to that page\n        if (this.state.redirect) {\n            return (\n                <Redirect\n                    to={{\n                        pathname: '/login',\n                        state: { source: `/recipe/${this.state.recipeID}` }\n                    }}>\n                </Redirect>\n            );\n        }\n\n        //Recipe not found\n        if (!this.state.recipeFound) {\n            return (\n                <div id='notFoundNotice'>\n                    Recipe not found!\n                    Please try again\n                </div>\n            );\n        }\n\n        //Recipe found\n        else {\n            return (\n                <div>\n                    { this.state.recipeName\n                      ? <Helmet>\n                            <title>{'Magellan - ' + this.state.recipeName}</title>\n                        </Helmet>\n                      : <Helmet>\n                            <title>{'Magellan'}</title>\n                        </Helmet>\n                    }\n\n                    <div id='header'>\n                        <div id='recipeName'>\n                            {this.state.recipeName}\n                        </div>\n\n                        { this.state.author\n                          ? <div id='author'>\n                                by {this.state.author}\n                            </div>\n                          : <p className='invisibleElement'></p>\n                        }\n\n                        <div id='source'>\n                            Courtesy of\n                            <span id='sourceText'>\n                                {this.state.source}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id='image'>\n                        { this.state.imageURL\n                          ? <img src={this.state.imageURL} alt='' width='600'></img>\n                          : <p className='invisibleElement'></p>\n                        }\n\n                        <div id='sourceLink'>\n                            <a target='_blank' rel='noopener noreferrer' href={this.state.URL}>Original Recipe</a>\n                        </div>\n                    </div>\n\n                    <div id='saveRecipeButton'>\n                        <button\n                            onClick={\n                                this.state.recipeSaved\n                                ? this.removeRecipe\n                                : this.saveRecipe\n                            }>\n                            { this.props.verified\n                              ? this.state.recipeSaved\n                                ? 'Remove Recipe'\n                                : 'Save Recipe'\n                              : 'Log in to save this recipe'\n                            }\n                        </button>\n                    </div>\n                    \n                    <div id='details'>\n                        <div id='detailsLeft'>\n                            <div id='difficulty'>\n                                Difficulty:\n                                <span id='difficultyText'>\n                                    {this.state.difficulty}\n                                </span>\n                            </div>\n                            \n                            <div id='yield'>\n                                Yield:\n                                <span id='yieldText'>\n                                    {this.state.yield}\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id='times'>\n                            <div id='totalTime'>\n                                Total Time:\n                                <span id='totalTimeText'>\n                                    {this.state.totalTime}\n                                </span>\n                            </div>\n\n                            <div id='timesList'>\n                                <ul>\n                                    <div id='prepTime'>\n                                        { this.state.prepTime\n                                          ? <li>\n                                                <span id='prepTimeText'>\n                                                    {this.state.prepTime}\n                                                </span>\n                                                prep time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='cookTime'>\n                                        { this.state.cookTime\n                                          ? <li>\n                                                <span id='cookTimeText'>\n                                                    {this.state.cookTime}\n                                                </span>\n                                                cook time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='activeTime'>\n                                        { this.state.activeTime\n                                          ? <li>\n                                                <span id='activeTimeText'>\n                                                    {this.state.activeTime}\n                                                </span>\n                                                active time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='inactiveTime'>\n                                        { this.state.inactiveTime\n                                          ? <li>\n                                                <span id='inactiveTimeText'>\n                                                    {this.state.inactiveTime}\n                                                </span>\n                                                inactive time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id='ingredients'>\n                        <div className='listHeader'>\n                            Ingredients\n                        </div>\n\n                        <ArrayToList\n                            list={this.state.ingredients}\n                            ordered={false}\n                        />\n                    </div>\n\n                    <div id='directions'>\n                        <div className='listHeader'>\n                            Directions\n                        </div>\n\n                        <ArrayToList\n                            list={this.state.directions}\n                            ordered={true}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchCard.css';\n\ninterface Props {\n    info: RecipeDataResult\n}\n\nconst SearchCard: FunctionComponent<Props> = (props) => {\n    const data = props.info;\n    const link = `/recipe/${data._id}`;\n\n    //Select the appropriate class so we can give each source a unique color\n    let src = '';\n        \n    switch(data.source) {\n        case (\"Food Network\"):\n            src = \"FNsource\";\n            break;\n        case (\"Taste of Home\"):\n            src = \"TOHsource\";\n            break;\n    }\n\n    return (\n        <div id='card' className='expandableCard'>\n            <a className='cardRecipeLink'\n                target='_blank'\n                rel='noopener noreferrer'\n                href={link}>\n\n                <div id='cardContents'>\n                    <div id='cardInfo'>\n                        <div id='cardRecipeName'>{data.recipeName}</div>\n                        <div id='secondaryDetails'>\n                            { data.author\n                              ? <div id='cardAuthor'>by {data.author}</div>\n                              : <p></p>\n                            }\n\n                            <div id='tertiaryDetails'>\n                                { data.source\n                                  ? <div id='cardSource' className={src}>\n                                        from {data.source}\n                                    </div>\n                                  : <p></p>\n                                }\n\n                                { data.totalTime\n                                    ? <div id='cardTotalTime'>{data.totalTime}</div>\n                                    : <p></p>\n                                }\n                                \n                            </div>\n                        </div>\n                    </div>\n                    { data.imageURL\n                      ? <img id='cardPhoto' src={data.imageURL} alt=''></img>\n                      : <p></p>\n                    }\n                </div>\n            </a>\n        </div>\n    );\n}\n\nexport default SearchCard;\n","import React, { Component } from 'react';\nimport SearchCard from './searchCard';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchResults.css';\n\ninterface Props {\n    data: RecipeDataResult[]\n}\n\ninterface State {\n    currentResults: JSX.Element[],\n    numResults: number,\n    numResultsPerPage: number,\n    lastPage: number,\n    currentPage: number\n}\n\nexport default class SearchResults extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            currentResults: [],\n            numResults: 0,\n            numResultsPerPage: 5, //Arbitrary\n            lastPage: 0,\n            currentPage: 1\n        };\n    }\n\n    //Returns the recipes to show on the current page\n    updateCurrentResults = (): void => {\n        console.log('updating current results');\n\n        //Calculate the range of results to use\n        const curPage = this.state.currentPage;\n        const maxResults = this.state.numResultsPerPage;\n\n        let firstIdx = (curPage - 1) * maxResults;\n        let secondIdx = curPage * maxResults;\n\n        console.log(firstIdx, secondIdx);\n\n        //Turn them into search cards\n        const visibleResults = this.props.data\n            .slice(firstIdx, secondIdx)\n            .map(recipe => (\n                <SearchCard info={recipe} />\n            )\n        );\n\n        this.setState({\n            currentResults: visibleResults\n        }, () => {\n            console.log('visible results updated');\n            this.forceUpdate();\n        });\n    }\n\n    goToPreviousPage = (): void => {\n        console.log('going to previous page');\n\n        const curPage = this.state.currentPage;\n\n        if (curPage > 1) {\n            this.setState({\n                currentPage: curPage - 1\n            }, () => {\n                console.log('page num decremented');\n                this.updateCurrentResults();\n            });\n        }\n    }\n\n    goToNextPage = (): void => {\n        console.log('going to next page');\n\n        const curPage = this.state.currentPage;\n        const lastPage = this.state.lastPage;\n\n        if (curPage < lastPage) {\n            this.setState({\n                currentPage: curPage + 1\n            }, () => {\n                console.log('page num incremented')\n                this.updateCurrentResults();\n            });\n        }\n    }\n\n    //When the component loads, calculate the number of pages needed\n    componentDidMount() {\n        const numResults = this.props.data.length;\n        const pageDensity = this.state.numResultsPerPage;\n        \n        this.setState({\n            numResults: numResults,\n            lastPage: Math.ceil(numResults / pageDensity)\n        }, () => {\n            this.updateCurrentResults();\n        });\n    }\n\n    render() {\n        console.log('rendering');\n        return (\n            <div id='wrapper'>\n                <div id='topResultsLabel'>\n                    Top Results:\n                </div>\n\n                <div id='resultsContainer'>\n                    <div id='scrollLeftButton'>\n                        { this.state.currentPage > 1\n                          ? <button\n                                className='scrollButton'\n                                onClick={this.goToPreviousPage}>\n                                    ◀\n                            </button>\n                          : <div className='scrollPlaceholder'> </div>\n                        }\n                    </div>\n\n                    <div id='resultsList'>\n                        {this.state.currentResults}\n                    </div>\n\n                    <div id='scrollRightButton'>\n                        { this.state.currentPage < this.state.lastPage\n                          ? <button\n                                className='scrollButton'\n                                onClick={this.goToNextPage}>\n                                    ▶\n                            </button>\n                          : <div className='scrollPlaceholder'> </div>\n                        }\n                    </div>\n                </div>\n\n                <div id='pageDetails'>\n                    <div>Viewing page {this.state.currentPage} of {this.state.lastPage}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\nimport SearchResults from './searchResults';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchBar.css';\n\n//Define local types\n\nexport type SearchType = 'name' | 'ing';\n\ninterface State {\n    searchType:   SearchType,\n    input:        string,\n    emptyInput:   boolean,\n    resultsFound: boolean,\n    loading:      boolean,\n    results:      RecipeDataResult[],\n    maxResults:   number\n}\n\nexport default class SearchBar extends Component {\n    state: State = {\n        searchType:   'name',\n        input:        '',\n        emptyInput:   false,\n        resultsFound: true,\n        loading:      false,\n        results:      [],\n        maxResults:   35 //Arbitrary\n    };\n\n    //Launch a search in the server and store the results\n    getResults = async () => {\n\n        //Make sure they entered something\n        if (this.state.input) {\n            \n            //Query the db\n            const fetchURL = `/api/search/${this.state.searchType}/${this.state.input}/${this.state.maxResults}`;\n            this.setState({\n                results: [],\n                resultsFound: true,\n                loading: true,\n                emptyInput: false\n            });\n\n            const res = await fetch(fetchURL); //Execute the search\n            const data = await res.json();\n\n            //No search results\n            if (data.error) {\n                this.setState({\n                    resultsFound: false,\n                    loading: false\n                });\n            }\n\n            //Store the results in state\n            else {\n                this.setState({\n                    resultsFound: true,\n                    loading: false,\n                    results: data.searchResults\n                });\n            }\n        }\n        else {\n            this.setState({\n                emptyInput: true,\n                resultsFound: true, //Hide this notice if last search found nothing\n                results: []\n            });\n        }\n    }\n\n    //Save the user's current input in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ input: event.currentTarget.value });\n    }\n\n    //Change the search type when the radio buttons are clicked\n    updateSearchType = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ searchType: event.currentTarget.value });\n    }\n\n    // Search bar - form accepts the search and queries the db\n    render() {\n        //CSS for loading bar\n        const override = css`\n            width: 285px;\n            margin-top: 10px;\n            margin-left: auto;\n            margin-right: auto;\n            background-color: lightgrey;\n        `;\n\n        return (\n            <div id='searchContainer'>\n                <div id='notice'>\n                    Find your next meal!\n                </div>\n\n                <form\n                    name='searchBar'\n                    target='hiddenFrame'\n                    onSubmit={this.getResults}>\n\n                    <div id='searchBarWrapper'>\n                        <input\n                            name='search'\n                            id='searchInput'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Search for recipes'\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <button\n                            type='submit'\n                            id='searchButton'\n                            className='fa fa-search'>\n                        </button>\n                    </div>\n                    \n                    <div id='searchType'>\n                        Search by:\n\n                        <div id='searchTypeNameWrapper'>\n                            <input\n                                type='radio'\n                                id='searchTypeNameButton'\n                                name='searchType'\n                                value='name'\n                                onChange={this.updateSearchType}\n                                checked={this.state.searchType === 'name'}>\n                            </input>\n\n                            <label htmlFor='searchTypeNameButton'>Recipe Name</label>\n                        </div>\n\n                        <div id='searchTypeIngWrapper'>\n                            <input\n                                type='radio'\n                                id='searchTypeIngButton'\n                                name='searchType'\n                                value='ing'\n                                onChange={this.updateSearchType}\n                                checked={this.state.searchType === 'ing'}>\n                            </input>\n                            \n                            <label htmlFor='searchTypeIngButton'>Ingredient</label>\n                        </div>\n                    </div>\n\n                    <div id='inputReminder'>\n                        { this.state.emptyInput\n                          ? <h4>Please enter something to search</h4>\n                          : <p></p>\n                        }\n                    </div>\n\n                    <div id='loadingBar'>\n                        { this.state.loading\n                          ? <div>\n                                Searching...\n                                <BarLoader height={6} css={override}/>\n                            </div>\n                          : <p></p>\n                        }\n                    </div>\n                </form>\n                \n                <div id='results'>\n                    { !this.state.resultsFound\n                      ? <div id='failNotice'>No results found. Try again</div>\n                      : <p></p>\n                    }\n                    { this.state.results.length\n                      ? <SearchResults data={this.state.results}/>\n                      : <p></p>\n                    }\n                </div>\n\n                {/* Form redirects to this invisible iframe, keeping it on the same page */}\n                <iframe name='hiddenFrame' id='iframe' title='hidden'></iframe>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport SearchBar from './searchBar';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>{'Magellan'}</title>\n                </Helmet>\n                \n                <SearchBar />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Redirect, Link, RouteComponentProps } from 'react-router-dom';\nimport '../styles/register.css';\n\ninterface Props extends RouteComponentProps {\n    source: string\n}\n\ninterface State {\n    email: string,\n    password: string,\n    confirmPassword: string,\n    errors: string[],\n    redirectAfterSumbit: boolean\n};\n\nexport default class Register extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            confirmPassword: '',\n            errors: [],\n            redirectAfterSumbit: false\n        };\n    }\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let { id, value } = event.currentTarget;\n\n        switch(id) {\n            case 'email':\n                this.setState({\n                    email: value\n                });\n                break;\n            case 'password':\n                this.setState({\n                    password: value\n                });\n                break;\n            case 'confirmPassword':\n                this.setState({\n                    confirmPassword: value\n                });\n                break;\n        }\n    }\n\n    //Submit the form and save any errors that might have returned\n    submitPage = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        const inputs = JSON.stringify({\n            email:           this.state.email,\n            password:        this.state.password,\n            confirmPassword: this.state.confirmPassword\n        });\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: inputs\n        };\n\n        try {\n            (async() => {\n                const response = await fetch('/auth/register', options);\n                const errors: string[] = await response.json();\n                \n                if (!errors.length) {\n                    this.setState({\n                        redirectAfterSumbit: true\n                    });\n                }\n                else {\n                    this.setState({\n                        errors\n                    });\n                }\n            })();\n        }\n        catch (err) {\n            console.log('Error submitting registration form:', err);\n        }\n    }\n\n    render() {\n        ////Determine where to redirect after submission\n        const location = this.props.location.state as any;\n        const destination = location ? location.source : '/home';\n\n        //Successful submission - move on\n        if (this.state.redirectAfterSumbit) {\n            return (\n                <Redirect\n                    to={{\n                        pathname: '/login',\n                        state: { source: destination }\n                    }}>\n                </Redirect>\n            );\n        }\n\n        return (\n            <div id='registerWrapper'>\n                <Helmet>\n                    <title>{'Magellan - Register'}</title>\n                </Helmet>\n                \n                <div id='registerHeader'>Create an account</div>\n\n                <form\n                    name='registerForm'\n                    onSubmit={this.submitPage}>\n\n                    <div>ERRORS:\n                        { this.state.errors.length\n                          ? this.state.errors\n                          : ''\n                        }\n                    </div>\n\n                    <div id='inputWrapper'>\n                        <label\n                            id='emailLabel'\n                            className='label'\n                            htmlFor='email'>\n                                Email Address:\n                        </label>\n                        <input\n                            className='input'\n                            id='email'\n                            name='email'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Email Address'\n                            value={this.state.email}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <label\n                            id='passwordLabel'\n                            className='label'\n                            htmlFor='password'>\n                                Password:\n                        </label>\n                        <input\n                            className='input'\n                            id='password'\n                            name='password'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Password'\n                            value={this.state.password}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <label\n                            id='confirmPasswordLabel'\n                            className='label'\n                            htmlFor='confirmPassword'>\n                                Confirm Password:\n                        </label>\n                        <input\n                            className='input'\n                            id='confirmPassword'\n                            name='confirmPassword'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Confirm Password'\n                            value={this.state.confirmPassword}\n                            onChange={this.updateInput}>\n                        </input>\n                    </div>\n\n                    <div id='registerLink'>\n                        Already have an account?\n                        <Link\n                            to={{\n                                pathname: '/login',\n                                state: { source: destination }\n                            }}>\n                                Log in here\n                        </Link>\n                    </div>\n\n                    <div id='submitButtonWrapper'>\n                        <button\n                            type='submit'\n                            id='submitButton'>\n                                Submit\n                        </button>\n                    </div>\n                </form>\n\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Redirect, Link, RouteComponentProps } from 'react-router-dom';\nimport '../styles/login.css';\n\ninterface LoginRouterProps {\n    source: string\n}\n\ninterface Props extends RouteComponentProps<LoginRouterProps>{\n    verified: boolean,\n    updateLoginStatus: () => Promise<void>\n}\n\ninterface State {\n    email: string,\n    password: string,\n    errors: string[],\n    redirectAfterSumbit: boolean\n};\n\nexport default class Login extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.updateLoginStatus = props.updateLoginStatus;\n        this.state = {\n            email: '',\n            password: '',\n            errors: [],\n            redirectAfterSumbit: false\n        };\n    }\n\n    updateLoginStatus() {}\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let { id, value } = event.currentTarget;\n\n        id === 'email'\n          ? this.setState({\n                email: value\n            })\n\n          : this.setState({\n                password: value\n            })\n        ;\n    }\n\n    //Submit the form and save any errors that might have returned\n    submitPage = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        const inputs = JSON.stringify({\n            email:    this.state.email,\n            password: this.state.password\n        });\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: inputs\n        };\n\n        try {\n            (async() => {\n                const response = await fetch('/auth/login', options);\n                const errors: string[] = await response.json();\n                \n                if (!errors.length) {\n                    this.updateLoginStatus();\n                    this.setState({\n                        redirectAfterSumbit: true\n                    });\n                }\n                else {\n                    this.setState({\n                        errors\n                    });\n                }\n            })();\n        }\n        catch (err) {\n            console.log('Error submitting login form:', err);\n        }\n    }\n\n    render() {\n        //Already logged in\n        if (this.props.verified) {\n            return (\n                <div>\n                    <Helmet>\n                        <title>{'Magellan - Login'}</title>\n                    </Helmet>\n\n                    <h3>You are already logged in</h3>\n                    <h4>Click\n                        <span>\n                            <Link to='/home'>\n                                here\n                            </Link>\n                        </span>\n                        to return to the home page\n                    </h4>\n                </div>\n            )\n        }\n\n        //Determine where to redirect after submission\n        const location = this.props.location.state as any;\n        const destination = location ? location.source : '/home';\n        \n        //Successful submission - move on\n        if (this.state.redirectAfterSumbit) {\n            return (<Redirect to={destination} />);\n        }\n\n        return (\n            <div id='loginWrapper'>\n                <Helmet>\n                    <title>{'Magellan - Login'}</title>\n                </Helmet>\n                \n                <div id='loginHeader'>Log In</div>\n\n                <form\n                    name='loginForm'\n                    onSubmit={this.submitPage}>\n\n                    <div>ERRORS:\n                        { this.state.errors.length\n                          ? this.state.errors\n                          : ''\n                        }\n                    </div>\n\n                    <div id='inputWrapper'>\n                        <label\n                            id='emailLabel'\n                            className='label'\n                            htmlFor='email'>\n                                Email Address:\n                        </label>\n                        <input\n                            className='input'\n                            id='email'\n                            name='email'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Email Address'\n                            value={this.state.email}\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <label\n                            id='passwordLabel'\n                            className='label'\n                            htmlFor='password'>\n                                Password:\n                        </label>\n                        <input\n                            className='input'\n                            id='password'\n                            name='password'\n                            type='password'\n                            autoComplete='off'\n                            placeholder='Password'\n                            value={this.state.password}\n                            onChange={this.updateInput}>\n                        </input>\n                    </div>\n\n                    <div id='registerLink'>\n                        Don't have an account yet?\n                        <Link\n                            to={{\n                                pathname: '/register',\n                                state: { source: destination }\n                            }}>\n                                Register here\n                        </Link>\n                    </div>\n\n                    <div id='submitButtonWrapper'>\n                        <button\n                            type='submit'\n                            id='submitButton'>\n                                Submit\n                        </button>\n                    </div>\n                </form>\n\n            </div>\n        );\n    }\n}\n","import React, { FunctionComponent } from 'react';\nimport { SavedRecipe } from '../../../magellan';\nimport '../styles/savedRecipeCard.css';\n\ninterface Props {\n    info: SavedRecipe\n}\n\nconst SavedRecipeCard: FunctionComponent<Props> = (props) => {\n    const data = props.info;\n    const link = `/recipe/${data._id}`;\n\n    return (\n        <div id='savedRecipeCard'>\n            <a className='savedRecipeCardLink'\n                target='_blank'\n                rel='noopener noreferrer'\n                href={link}>\n\n                <div id='savedRecipeCardContents'>\n                    <div id='savedRecipeCardName'>\n                        {data.recipeName}\n                    </div>\n                    { data.author\n                      ? <div id='savedRecipeCardAuthor'>by {data.author}</div>\n                      : <p></p>\n                    }\n                </div>\n            </a>\n        </div>\n    );\n}\n\nexport default SavedRecipeCard;\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport SavedRecipeCard from './savedRecipeCard';\nimport { SavedRecipe } from '../../../magellan';\nimport '../styles/user.css';\n\ninterface Props {\n    verified: boolean\n}\n\ninterface State {\n    email: string,\n    savedRecipes: SavedRecipe[]\n};\n\nexport default class User extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            email: '',\n            savedRecipes: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.getUserData();\n    }\n\n    //Get the email and saved recipes for the current user\n    getUserData = async () => {\n        try {\n            const response = await fetch('/user/userData');\n            const userData = await response.json();\n    \n            this.setState({\n                email: userData.email || '',\n                savedRecipes: userData.savedRecipes || []\n            })\n        }\n        catch (err) {\n            console.log('Error retrieving user data:', err);\n        }\n    }\n\n    render() {\n        const formattedRecipes = this.state.savedRecipes\n            .map(recipe => (\n                <SavedRecipeCard info={recipe} />\n            )\n        );\n        \n        if (!this.props.verified) {\n            return (\n                <div>\n                    <Helmet>\n                        <title>{'Magellan - Profile'}</title>\n                    </Helmet>\n\n                    <h3>You are not yet logged in</h3>\n                    <h4>Click \n                        <span>\n                            <Link\n                                to={{\n                                    pathname: '/login',\n                                    state: { source: '/user' }\n                                }}>\n                                    here\n                            </Link>\n                        </span>\n                        to log in\n                    </h4>\n                </div>\n            )\n        }\n    \n        return (\n            <div id='userDetails'>\n                <Helmet>\n                    <title>{'Magellan - Profile'}</title>\n                </Helmet>\n\n                <div id='emailNotice'>\n                    You are logged in as {this.state.email}\n                </div>\n\n                { formattedRecipes.length\n                  ? <div id='savedRecipes'>\n                        <div id='recipeNotice'>\n                            Here are your saved recipes:\n                        </div>\n\n                        <div id='recipeList'>\n                            {formattedRecipes}\n                        </div>\n                    </div>\n\n                  : <div id='recipeNotice'>\n                        You do not have any saved recipes\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Banner from './components/banner';\nimport Recipe from './components/recipe';\nimport Home from './components/home';\nimport Register from './components/register';\nimport Login from './components/login';\nimport User from './components/user';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from 'react-router-dom';\n\nimport './styles/App.css';\n\ninterface State {\n    verified: boolean,\n    auth_error: string\n};\n\nexport default class App extends Component {\n    state: State = {\n        verified: false,\n        auth_error: ''\n    };\n\n    async updateLoginStatus() {\n        const response  = await fetch('/auth/verified');\n        const authCheck = await response.json();\n\n        this.setState({\n            verified:   authCheck.verified,\n            auth_error: authCheck.auth_error\n        });\n    }\n\n    componentDidMount() {\n        this.updateLoginStatus();\n    }\n\n    async logout() {\n        const response  = await fetch('/auth/logout');\n        const logoutStatus = await response.json();\n\n        this.setState({\n            verified:   logoutStatus.verified,\n            auth_error: logoutStatus.auth_error\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Router>\n                    <Banner\n                        verified={this.state.verified}\n                        auth_error={this.state.auth_error}\n                        logout={this.logout.bind(this)}>\n                    </Banner>\n\n                    <Switch>\n                        <Route\n                            path={'/home'}\n                            component={Home}>\n                        </Route>\n\n                        <Route\n                            path={'/recipe/:recipeid'}\n                            render={(props) => (\n                                <Recipe\n                                    {...props}\n                                    verified={this.state.verified}>\n                                </Recipe>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/register'}\n                            component={Register}>\n                        </Route>\n\n                        <Route\n                            path={'/login'}\n                            render={(props) => (\n                                <Login\n                                    {...props}\n                                    verified={this.state.verified}\n                                    updateLoginStatus={this.updateLoginStatus.bind(this)}>\n                                </Login>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/user'}\n                            render={(props) => (\n                                <User\n                                    {...props}\n                                    verified={this.state.verified}>\n                                </User>\n                            )}>\n                        </Route>\n\n                        <Route\n                            path={'/'}>\n                            <Redirect to={'/home'} />\n                        </Route>\n                    </Switch>\n\n                </Router>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}