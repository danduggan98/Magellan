{"version":3,"sources":["components/recipe.tsx","components/searchCard.tsx","components/searchResults.tsx","components/searchBar.tsx","components/home.tsx","components/login.tsx","App.tsx","index.tsx"],"names":["ArrayToList","props","items","i","list","length","section","itemList","j","next","push","key","header","className","ordered","toString","Recipe","state","recipeFound","recipeID","match","params","recipeid","URL","imageURL","author","recipeName","difficulty","totalTime","prepTime","inactiveTime","activeTime","cookTime","yield","ingredients","directions","source","fetch","this","res","json","data","error","setState","Helmet","id","src","alt","width","target","rel","href","Component","SearchCard","recipe","info","link","_id","SearchResults","results","maxResultsPerPage","overflow","Array","from","slice","map","SearchBar","searchType","input","emptyInput","resultsFound","loading","maxResults","getResults","a","fetchURL","searchResults","updateInput","event","currentTarget","value","updateSearchType","override","css","name","onSubmit","type","autoComplete","placeholder","onChange","checked","htmlFor","height","title","Home","Login","usernameInput","passwordInput","submitPage","console","log","App","to","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3cd221de.chunk.js","sourcesContent":["import React, { Component, FunctionComponent } from 'react';\nimport { Helmet } from 'react-helmet';\nimport '../styles/recipe.css';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { RecipeData } from '../../../magellan';\n\n//Define local types\n\ninterface ArrayToListProps {\n    list:    string[][],\n    ordered: boolean\n}\n\ninterface RecipeParams {\n    recipeid: string\n}\n\ninterface Props extends RouteComponentProps<RecipeParams> {}\n\ninterface State {\n    recipeFound:  boolean,\n    recipeID:     string,\n    URL:          string,\n    imageURL:     string,\n    author:       string,\n    recipeName:   string,\n    difficulty:   string | undefined,\n    totalTime:    string | undefined,\n    prepTime:     string | undefined,\n    inactiveTime: string | undefined,\n    activeTime:   string | undefined,\n    cookTime:     string | undefined,\n    yield:        string | undefined,\n    ingredients:  string[][],\n    directions:   string[][],\n    source:       string | undefined\n}\n\n//Parse an array of ingredients or directions into a JSX list\nconst ArrayToList: FunctionComponent<ArrayToListProps> = (props) => {\n    let items: JSX.Element[] = [];\n\n    //Iterate through each section\n    for (let i = 0; i < props.list.length; i++) {\n        let section: JSX.Element[] = [];\n        let itemList = props.list[i];\n\n        //Store each item in the inner array as an HTML list item\n        for (let j = 1; j < itemList.length; j++) { //Start at j = 1 to skip the header\n            let next = itemList[j];\n            section.push (\n                <li key={next}>\n                    {next}\n                </li>\n            );\n        }\n\n        //Print the section header if noteworthy\n        const header = itemList[0];\n\n        if (header !== 'main') {\n            items.push (\n                <div className='sectionHeader'\n                    key={header}>\n                    {header}\n                </div>\n            );\n        }\n\n        //Print the list of items\n        items.push (\n            <div className='sectionData'>\n                { props.ordered\n                  ? <ol key={section.toString()}>\n                        {section}\n                    </ol>\n                  : <ul key={section.toString()}>\n                        {section}\n                    </ul>\n                }\n            </div>\n        );\n    }\n\n    return (\n        <div>{items}</div>\n    );\n}\n\n//Display full recipe data\nexport default class Recipe extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            recipeFound:  true,\n            recipeID:     this.props.match.params.recipeid, //URL parameter\n            URL:          '',\n            imageURL:     '',\n            author:       '',\n            recipeName:   '',\n            difficulty:   '',\n            totalTime:    '',\n            prepTime:     '',\n            inactiveTime: '',\n            activeTime:   '',\n            cookTime:     '',\n            yield:        '',\n            ingredients:  [],\n            directions:   [],\n            source:       ''\n        };\n    }\n\n    //Gather data from server JSON response\n    async componentDidMount() {\n        const res = await fetch(`/api/recipe/${this.state.recipeID}`);\n        const data: RecipeData = await res.json();\n\n        //Recipe not found\n        if (data.error) {\n            this.setState({ recipeFound: false });\n        }\n        //Recipe found\n        else {\n            this.setState({\n                URL:          data.URL,\n                imageURL:     data.imageURL,\n                author:       data.author,\n                recipeName:   data.recipeName,\n                difficulty:   data.difficulty,\n                totalTime:    data.totalTime,\n                prepTime:     data.prepTime,\n                inactiveTime: data.inactiveTime,\n                activeTime:   data.activeTime,\n                cookTime:     data.cookTime,\n                yield:        data.yield,\n                ingredients:  data.ingredients,\n                directions:   data.directions,\n                source:       data.source\n            });\n        }\n    }\n\n    render() {\n        //Recipe not found\n        if (!this.state.recipeFound) {\n            return (\n                <div id='notFoundNotice'>\n                    Recipe not found!\n                    Please try again\n                </div>\n            );\n        }\n        //Recipe found\n        else {\n            return (\n                <div>\n                    { this.state.recipeName\n                      ? <Helmet>\n                            <title>{'Magellan - ' + this.state.recipeName}</title>\n                        </Helmet>\n                      : <Helmet>\n                            <title>{'Magellan'}</title>\n                        </Helmet>\n                    }\n\n                    <div id='header'>\n                        <div id='recipeName'>\n                            {this.state.recipeName}\n                        </div>\n\n                        <div id='author'>\n                            by {this.state.author}\n                        </div>\n\n                        <div id='source'>\n                            Courtesy of\n                            <span id='sourceText'>\n                                {this.state.source}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id='image'>\n                        { this.state.imageURL\n                          ? <img src={this.state.imageURL} alt='' width='600'></img>\n                          : <p className='invisibleElement'></p>\n                        }\n\n                        <div id='sourceLink'>\n                            <a target='_blank' rel='noopener noreferrer' href={this.state.URL}>Original Recipe</a>\n                        </div>\n                    </div>\n                    \n                    <div id='details'>\n                        <div id='detailsLeft'>\n                            <div id='difficulty'>\n                                Difficulty:\n                                <span id='difficultyText'>\n                                    {this.state.difficulty}\n                                </span>\n                            </div>\n                            \n                            <div id='yield'>\n                                Yield:\n                                <span id='yieldText'>\n                                    {this.state.yield}\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id='times'>\n                            <div id='totalTime'>\n                                Total Time:\n                                <span id='totalTimeText'>\n                                    {this.state.totalTime}\n                                </span>\n                            </div>\n\n                            <div id='timesList'>\n                                <ul>\n                                    <div id='prepTime'>\n                                        { this.state.prepTime\n                                          ? <li>\n                                                <span id='prepTimeText'>\n                                                    {this.state.prepTime}\n                                                </span>\n                                                prep time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='cookTime'>\n                                        { this.state.cookTime\n                                          ? <li>\n                                                <span id='cookTimeText'>\n                                                    {this.state.cookTime}\n                                                </span>\n                                                cook time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='activeTime'>\n                                        { this.state.activeTime\n                                          ? <li>\n                                                <span id='activeTimeText'>\n                                                    {this.state.activeTime}\n                                                </span>\n                                                active time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                    \n                                    <div id='inactiveTime'>\n                                        { this.state.inactiveTime\n                                          ? <li>\n                                                <span id='inactiveTimeText'>\n                                                    {this.state.inactiveTime}\n                                                </span>\n                                                inactive time\n                                            </li>\n                                          : <p className='invisibleElement'></p>\n                                        }\n                                    </div>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id='ingredients'>\n                        <div className='listHeader'>\n                            Ingredients\n                        </div>\n\n                        <ArrayToList\n                            list={this.state.ingredients}\n                            ordered={false}\n                        />\n                    </div>\n\n                    <div id='directions'>\n                        <div className='listHeader'>\n                            Directions\n                        </div>\n\n                        <ArrayToList\n                            list={this.state.directions}\n                            ordered={true}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n","import React, {Component} from 'react';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchCard.css';\n\ninterface Props {\n    info: RecipeDataResult\n}\n\ninterface State {\n    recipe: RecipeDataResult\n}\n\nexport default class SearchCard extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            recipe: props.info\n        };\n    }\n\n    render() {\n        const data = this.state.recipe;\n        const link = `/recipe/${data._id}`;\n\n        return (\n            <div id='card'>\n                 <a className='cardRecipeLink'\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={link}>\n                    \n                    <div id='cardInfo'>\n                        <div id='cardRecipeName'>{data.recipeName}</div>\n                        <div id='cardAuthor'>by {data.author}</div>\n                        <div id='cardTotalTime'>{data.totalTime}</div>\n                    </div>\n                </a>\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport SearchCard from './searchCard';\nimport { RecipeDataResult } from '../../../magellan'\nimport '../styles/searchResults.css';\n\ninterface Props {\n    data: RecipeDataResult[]\n}\n\ninterface State {\n    results: RecipeDataResult[],\n    maxResultsPerPage: number\n}\n\nexport default class SearchResults extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            results: props.data,\n            maxResultsPerPage: 9 //Arbitrary\n        };\n    }\n\n    render() {\n        //See if there will be extra recipes for a new page\n        const overflow = (this.state.results.length > this.state.maxResultsPerPage);\n        \n        //Grab the recipes we will show, up to the given limit\n        const res = Array.from(this.state.results);\n        const visible = res.slice(0, this.state.maxResultsPerPage);\n\n        //Turn them into search cards\n        const list = visible.map(recipe => (\n            <SearchCard info={recipe} />\n        ));\n\n        return (\n            <div id='resultsContainer'>\n                <h2>Top Results:</h2>\n                <div id='resultsList'>\n                    {list}\n                </div>\n\n                { overflow\n                  ? <div>See more results</div>\n                  : <p></p>\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { css } from '@emotion/core';\nimport BarLoader from 'react-spinners/BarLoader';\nimport SearchResults from './searchResults';\nimport { RecipeDataResult } from '../../../magellan';\nimport '../styles/searchBar.css';\n\n//Define local types\n\nexport type SearchType = 'name' | 'ing';\n\ninterface State {\n    searchType:   SearchType,\n    input:        string,\n    emptyInput:   boolean,\n    resultsFound: boolean,\n    loading:      boolean,\n    results:      RecipeDataResult[],\n    maxResults:   number\n}\n\nexport default class SearchBar extends Component {\n    state: State = {\n        searchType:   'name',\n        input:        '',\n        emptyInput:   false,\n        resultsFound: true,\n        loading:      false,\n        results:      [],\n        maxResults:   36 //Arbitrary\n    };\n\n    //Launch a search in the server and store the results\n    getResults = async () => {\n\n        //Ensure they have entered something\n        if (this.state.input) {\n\n            //If so, query the db\n            const fetchURL = `/api/search/${this.state.searchType}/${this.state.input}/${this.state.maxResults}`;\n            this.setState({\n                results: [],\n                resultsFound: true,\n                loading: true,\n                emptyInput: false\n            });\n\n            const res = await fetch(fetchURL); //Execute the search\n            const data = await res.json();\n\n            //No search results\n            if (data.error) {\n                this.setState({\n                    resultsFound: false,\n                    loading: false\n                });\n            }\n\n            //Store the results in state\n            else {\n                this.setState({\n                    resultsFound: true,\n                    loading: false,\n                    results: data.searchResults\n                });\n            }\n        }\n        else {\n            this.setState({\n                emptyInput: true,\n                resultsFound: true, //Hide this notice if last search found nothing\n                results: []\n            });\n        }\n    }\n\n    //Save the user's current input in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ input: event.currentTarget.value });\n    }\n\n    //Change the search type when the radio buttons are clicked\n    updateSearchType = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ searchType: event.currentTarget.value });\n    }\n\n    // Search bar - form accepts the search and queries the db\n    render() {\n        //CSS for loading bar\n        const override = css`\n            width: 285px;\n            margin-top: 10px;\n            margin-left: auto;\n            margin-right: auto;\n            background-color: lightgrey;\n        `;\n\n        return (\n            <div id='searchContainer'>\n                <div id='notice'>\n                    Find your next meal!\n                </div>\n\n                <form\n                    name='searchBar'\n                    target='hiddenFrame'\n                    onSubmit={this.getResults}>\n\n                    <div id='searchBarWrapper'>\n                        <input\n                            name='search'\n                            id='searchInput'\n                            type='text'\n                            autoComplete='off'\n                            placeholder='Search for recipes'\n                            onChange={this.updateInput}>\n                        </input>\n\n                        <button\n                            type='submit'\n                            id='searchButton'\n                            className='fa fa-search'>\n                        </button>\n                    </div>\n                    \n                    <div id='searchType'>\n                        Search by:\n\n                        <div id='searchTypeNameWrapper'>\n                            <input\n                                type='radio'\n                                id='searchTypeNameButton'\n                                name='searchType'\n                                value='name'\n                                onChange={this.updateSearchType}\n                                checked={this.state.searchType === 'name'}>\n                            </input>\n\n                            <label htmlFor='searchTypeNameButton'>Recipe Name</label>\n                        </div>\n\n                        <div id='searchTypeIngWrapper'>\n                            <input\n                                type='radio'\n                                id='searchTypeIngButton'\n                                name='searchType'\n                                value='ing'\n                                onChange={this.updateSearchType}\n                                checked={this.state.searchType === 'ing'}>\n                            </input>\n                            \n                            <label htmlFor='searchTypeIngButton'>Ingredient</label>\n                        </div>\n                    </div>\n\n                    <div id='inputReminder'>\n                        { this.state.emptyInput\n                          ? <h4>Please enter something to search</h4>\n                          : <p></p>\n                        }\n                    </div>\n\n                    <div id='loadingBar'>\n                        { this.state.loading\n                          ? <div>\n                                Searching...\n                                <BarLoader height={6} css={override}/>\n                            </div>\n                          : <p></p>\n                        }\n                    </div>\n                </form>\n                \n                <div id='results'>\n                    { !this.state.resultsFound\n                      ? <div id='failNotice'>No results found. Try again</div>\n                      : <p></p>\n                    }\n                    { this.state.results.length\n                      ? <SearchResults data={this.state.results}/>\n                      : <p></p>\n                    }\n                </div>\n\n                {/* Form redirects to this invisible iframe, keeping it on the same page */}\n                <iframe name='hiddenFrame' id='iframe' title='hidden'></iframe>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport SearchBar from './searchBar';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                <SearchBar />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport '../styles/login.css';\n\ninterface State {\n    usernameInput: string,\n    passwordInput: string\n};\n\nexport default class Login extends Component {\n    state: State = {\n        usernameInput: '',\n        passwordInput: ''\n    };\n\n    //Store the most recent inputs in state\n    updateInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let { id, value } = event.currentTarget;\n        this.setState({ [id]: value });\n    }\n\n    submitPage = () => {\n        if (!this.state.usernameInput) {\n            console.log('PLEASE ENTER USERNAME');\n        }\n        if (!this.state.passwordInput) {\n            console.log('PLEASE ENTER PASSWORD');\n        }\n    }\n\n    render() {\n        return (\n            <div id='loginWrapper'>\n                <div id='loginHeader'>Log In</div>\n\n                <form\n                    name='loginForm'\n                    target='hiddenFrame'\n                    onSubmit={this.submitPage}>\n\n                    <div id='inputWrapper'>\n                        <div id='usernameInputWrapper'>\n                            <label id='usernameLabel' htmlFor='usernameInput'>Username:</label>\n                            <input\n                                name='UN'\n                                id='usernameInput'\n                                type='text'\n                                autoComplete='off'\n                                placeholder='Username'\n                                value={this.state.usernameInput}\n                                onChange={this.updateInput}>\n                            </input>\n                        </div>\n\n                        <div id='passwordInputWrapper'>\n                            <label id='passwordLabel' htmlFor='passwordInput'>Password:</label>\n                            <input\n                                name='PW'\n                                id='passwordInput'\n                                type='password'\n                                autoComplete='off'\n                                placeholder='Password'\n                                value={this.state.passwordInput}\n                                onChange={this.updateInput}>\n                            </input>\n                        </div>\n                    </div>\n\n                    <div id='submitButtonWrapper'>\n                        <button\n                            type='submit'\n                            id='submitButton'>\n                                Submit\n                        </button>\n                    </div>\n                </form>\n\n                {/* Form redirects to this invisible iframe, keeping it on the same page */}\n                <iframe name='hiddenFrame' id='iframe' title='hidden'></iframe>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Recipe from './components/recipe';\nimport Home from './components/home';\nimport Login from './components/login';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from 'react-router-dom';\n\nimport './styles/App.css';\n\nexport default function App() {\n  return (\n    <div>\n      <Router>\n\n        <div id='logoBanner'>\n          <Link to='/home' className='logo'>\n            MAGELLAN\n          </Link>\n\n          <Link to='/login' className='loginButton'>\n            Log In\n          </Link>\n        </div>\n\n        <Switch>\n          <Route path={'/recipe/:recipeid'} component={Recipe} />\n          <Route path={'/home'} component={Home} />\n          <Route path={'/login'} component={Login} />\n          <Route path={'/'}>\n            <Redirect to={'/home'} />\n          </Route>\n        </Switch>\n\n      </Router>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}